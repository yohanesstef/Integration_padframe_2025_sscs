# frozen_string_literal: true

################################################################################################
# Copyright 2023 GlobalFoundries PDK Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################################

#=======================================================================================================================
#--------------------------------------------- GF 0.18um MCU DRC RULE DECK ---------------------------------------------
#=======================================================================================================================
require 'time'
require 'logger'
require 'etc'

exec_start_time = Time.now

logger = Logger.new($stdout)

logger.formatter = proc do |_severity, datetime, _progname, msg|
  "#{datetime}: Memory Usage (" + `pmap #{Process.pid} | tail -1`[10, 40].strip + ") : #{msg}
"
end

#================================================
#----------------- FILE SETUP -------------------
#================================================
logger.info("Starting running GF180MCU Klayout DRC runset on #{$input}")
logger.info("Ruby Version for klayout: #{RUBY_VERSION}")

if $input
  if $topcell
    source($input, $topcell)
  else
    source($input)
  end
end

logger.info('Loading database to memory is complete.')

if $report
  logger.info("GF180MCU Klayout DRC runset output at: #{$report}")
  report('DRC Run Report at', $report)
else
  layout_dir = Pathname.new(RBA::CellView.active.filename).parent.realpath
  report_path = layout_dir.join('gf180_drc.lyrdb').to_s
  logger.info("GF180MCU Klayout DRC runset output at default location: #{report_path}")
  report('DRC Run Report at', report_path)
end

#================================================
#------------------ SWITCHES --------------------
#================================================
logger.info('Evaluate switches.')

def bool_check?(obj)
  obj.to_s.downcase == 'true'
end

TABLE_NAME = $table_name || 'main'

logger.info("table_name selected  #{TABLE_NAME}")

# connectivity rules
CONNECTIVITY_EN = bool_check?($conn_drc)

conn_tables = %w[dnwell dnwell_split nwell nwell_split lvpwell
                 lvpwell_split nat nat_split ldnmos ldnmos_split ldpmos ldpmos_split main]

CONNECTIVITY_RULES = if conn_tables.include?(TABLE_NAME) && CONNECTIVITY_EN
                       true
                     else
                       false
                     end

logger.info("CONNECTIVITY_RULES enabled: #{CONNECTIVITY_RULES}")

# split deep rules
SPLIT_DEEP = bool_check?($split_deep)

# WEDGE
WEDGE = bool_check?($wedge)

logger.info("Wedge enabled: #{WEDGE}")

# BALL
BALL = bool_check?($ball)

logger.info("Ball enabled: #{BALL}")

# GOLD
GOLD = bool_check?($gold)

logger.info("Gold enabled: #{GOLD}")

# MIM
MIM_OPTION = $mim_option || 'B'

logger.info("MIM Option selected: #{MIM_OPTION}")

# OFFGRID
OFFGRID = $offgrid != 'false'

logger.info("Offgrid enabled:  #{OFFGRID}")

# threads
if $thr
  threads($thr)
else
  thr ||= Etc.nprocessors
  threads(thr)
end

logger.info("Number of threads to use #{$thr}")

#=== PRINT DETAILS ===

verbose(bool_check?($verbose))

logger.info("Verbose mode: #{$verbose}")

# === TILING MODE ===
case $run_mode
## Tiling mode is for testing purpose only [Not used in run_drc.py]
when 'tiling'
  tiles(500.um)
  tile_borders(50.um)
  logger.info('Tiling  mode is enabled.')

when 'deep'
  #=== HIER MODE ===
  deep
  logger.info("deep  mode is enabled for #{TABLE_NAME} table")
else
  #=== FLAT MODE ===
  flat
  logger.info("flat  mode is enabled for #{TABLE_NAME} table")
end

# METAL_TOP
METAL_TOP = $metal_top || '9K'

logger.info("METAL_TOP Selected is #{METAL_TOP}")

# METAL_LEVEL
METAL_LEVEL = $metal_level || '5LM'

logger.info("METAL_STACK Selected is #{METAL_LEVEL}")

# FEOL
FEOL = bool_check?($feol)

logger.info("FEOL enabled: #{FEOL}")

# BEOL
BEOL = bool_check?($beol)

logger.info("BEOL enabled: #{BEOL}")

## SLOW_VIA
SLOW_VIA = bool_check?($slow_via)

logger.info("SLOW_VIA enabled: #{SLOW_VIA}")

#================================================
#------------- LAYERS DEFINITIONS ---------------
#================================================

# %include layers_def.drc

#=====================================================
#------------- BASE LAYERS DERIVATIONS ---------------
#=====================================================

dnwell_n        = dnwell.not(lvpwell)
dnwell_p        = dnwell.and(lvpwell)

all_nwell       = dnwell_n.join(nwell)

ncomp           = comp.and(nplus)
pcomp           = comp.and(pplus)
tgate           = poly2.and(comp).not(res_mk)

nactive         = ncomp.not(all_nwell)
ngate           = nactive.and(tgate)
nsd             = nactive.interacting(ngate).not(ngate).not(res_mk)
ptap            = pcomp.not(all_nwell).not(res_mk)

pactive         = pcomp.and(all_nwell)
pgate           = pactive.and(tgate)
psd             = pactive.interacting(pgate).not(pgate).not(res_mk)
ntap            = ncomp.and(all_nwell).not(res_mk)

ngate_dn        = ngate.and(dnwell_p)
ptap_dn         = ptap.and(dnwell_p).outside(well_diode_mk)

pgate_dn        = pgate.and(dnwell_n)
ntap_dn         = ntap.and(dnwell_n)

psd_dn          = pcomp.and(dnwell_n).interacting(pgate_dn).not(pgate_dn).not(res_mk)
nsd_dn          = ncomp.and(dnwell_p).interacting(ngate_dn).not(ngate_dn).not(res_mk)

natcomp        	= nat.and(comp)

# Gate
nom_gate = tgate.not(dualgate)
thick_gate = tgate.and(dualgate)

ngate_56v = ngate.and(dualgate)
pgate_56v = pgate.and(dualgate)

ngate_5v = ngate_56v.and(v5_xtor)
pgate_5v = pgate_56v.and(v5_xtor)

ngate_6v = ngate_56v.not(v5_xtor)
pgate_6v = pgate_56v.not(v5_xtor)

# DNWELL
dnwell_3p3v = dnwell.not_interacting(v5_xtor).not_interacting(dualgate)
dnwell_56v = dnwell.overlapping(dualgate)

# LVPWELL
lvpwell_dn = lvpwell.interacting(dnwell)
lvpwell_out = lvpwell.not_interacting(dnwell)

lvpwell_dn3p3v = lvpwell.and(dnwell_3p3v)
lvpwell_dn56v = lvpwell.and(dnwell_56v)

# NWELL
nwell_dn = nwell.interacting(dnwell)
nwell_n_dn = nwell.not_interacting(dnwell)

#================================================
#------------- LAYERS CONNECTIONS ---------------
#================================================

if CONNECTIVITY_RULES
  logger.info('Construct connectivity for the design.')

  connect(dnwell, ncomp)
  connect(lvpwell_out, pcomp)
  connect(lvpwell_dn, pcomp)
  connect(nwell, ncomp)
  connect(mvsd, ncomp)
  connect(mvpsd, pcomp)

  if contact_tables.include?(TABLE_NAME)
    connect(ncomp,  contact)
    connect(pcomp,  contact)
    connect(natcomp, contact)
    connect(contact, metal1)
  end

  if via1_tables.include?(TABLE_NAME)
    connect(metal1,  via1)
    connect(via1,    metal2)
  end

  case METAL_LEVEL
  when '3LM', '4LM', '5LM', '6LM'
    if via2_tables.include?(TABLE_NAME)
      connect(metal2,  via2)
      connect(via2,    metal3)
    end
  end
  case METAL_LEVEL
  when '4LM', '5LM', '6LM'
    connect(metal3,  via3)
    connect(via3,    metal4)
  end
  case METAL_LEVEL
  when '5LM', '6LM'
    connect(metal4,  via4)
    connect(via4,    metal5)
  end
  case METAL_LEVEL
  when '6LM'
    connect(metal5,  via5)
    connect(via5,    metaltop)
  end
end

#================================================
#------------ PRE-DEFINED FUNCTIONS -------------
#================================================

def unconn_errors_check(net1, net2, unconnected_errors)
  if !net1 || !net2
    logger.error("Connectivity check encountered 2 nets that doesn't exist. Potential issue in klayout...")
  elsif net1.circuit != net2.circuit || net1.cluster_id != net2.cluster_id
    # unconnected
    unconnected_errors.data.insert(ep)
  end
  unconnected_errors
end

def get_nets(_data, layer1, layer2, edge_pairs)
  net1 = l2n_data.probe_net(layer1.data, edge_pairs.first.p1)
  net2 = l2n_data.probe_net(layer2.data, edge_pairs.second.p1)
  [net1, net2]
end

def conn_space_viol(layer, conn_val, mode)
  connected_output = layer.space(conn_val.um, mode).polygons(0.001.um)
  singularity_errors = layer.space(0.001.um, mode).polygons(0.001.um)
  [connected_output, singularity_errors]
end

def conn_space_check(layer, not_conn_val, mode)
  unconnected_errors_unfiltered = layer.space(not_conn_val.um, mode)
  connected_output, singularity_errors = conn_space_viol(layer, conn_val, mode)
  # Filter out the errors arising from the same net
  unconnected_errors = DRC::DRCLayer.new(self, RBA::EdgePairs.new)
  unconnected_errors_unfiltered.data.each do |ep|
    net1, net2 = get_nets(l2n_data, layer, layer, ep)
    unconnected_errors = unconn_errors_check(net1, net2, unconnected_errors)
  end
  unconnected_output = unconnected_errors.polygons.join(singularity_errors)
  [connected_output, unconnected_output]
end

def conn_space_nets(layer, conn_val, not_conn_val, mode)
  nets = layer.nets
  connected_output = nets.space(conn_val.um, mode, props_eq).polygons(0.001.um)
  singularity_errors = nets.space(0.001.um, mode).polygons(0.001.um)
  unconnected_output = nets.space(not_conn_val.um, mode, props_ne).polygons(0.001.um).join(singularity_errors)
  [connected_output, unconnected_output]
end

def conn_space(layer, conn_val, not_conn_val, mode)
  if layer.respond_to?(:nets) # KLayout version (>=0.28.4) which supports "nets"
    connected_output, unconnected_output = conn_space_nets(layer, conn_val, not_conn_val, mode)
  else
    raise 'ERROR : Wrong connectivity implementation' if conn_val > not_conn_val

    connected_output, unconnected_output = conn_space_check(layer, not_conn_val, mode)
  end
  [connected_output, unconnected_output]
end

def sep_viol_nets(layer1, layer2, conn_val, not_conn_val, mode)
  connected_output   = layer1.nets.separation(layer2.nets, conn_val.um,     mode, props_eq).polygons(0.001.um)
  unconnected_output = layer1.nets.separation(layer2.nets, not_conn_val.um, mode, props_ne).polygons(0.001.um)
  [connected_output, unconnected_output]
end

def unconn_separation_check(layer1, layer2, not_conn_val, mode)
  unconnected_errors_unfiltered = layer1.separation(layer2, not_conn_val.um, mode)
  # Filter out the errors arising from the same net
  unconnected_errors = DRC::DRCLayer.new(self, RBA::EdgePairs.new)
  unconnected_errors_unfiltered.data.each do |ep|
    net1, net2 = get_nets(l2n_data, layer1, layer2, ep)
    unconnected_errors = unconn_errors(net1, net2, unconnected_errors)
  end
  unconnected_errors
end

def conn_separation(layer1, layer2, conn_val, not_conn_val, mode)
  if layer1.respond_to?(:nets) # KLayout version (>=0.28.4) which supports "nets"
    connected_output, unconnected_output = sep_viol_nets(layer1, layer2, conn_val, not_conn_val, mode)
  else
    raise 'ERROR : Wrong connectivity implementation' if conn_val > not_conn_val

    connected_output = layer1.separation(layer2, conn_val.um, mode).polygons(0.001.um)
    unconnected_errors = unconn_separation_check(layer1, layer2, not_conn_val, mode)
    unconnected_output = unconnected_errors.polygons(0.001.um)
  end
  [connected_output, unconnected_output]
end

def size_overunder_in_layers(large_layer, size_layer, size_value)
  out_layer = DRC::DRCLayer.new(self, RBA::Region.new)
  large_layer.data.each do |ep|
    curr_large_layer = DRC::DRCLayer.new(self, RBA::Region.new(ep))
    curr_large_layer = curr_large_layer.and(size_layer)
    curr_large_layer = curr_large_layer.sized(size_value, 'square_limit').merged.sized(-size_value, 'square_limit')
    out_layer.data.insert(curr_large_layer.data)
  end
  out_layer
end

# === IMPLICIT EXTRACTION ===
if CONNECTIVITY_RULES
  logger.info('Connectivity rules enabled, Netlist object will be generated.')
  netlist
end

# === LAYOUT EXTENT ===
CHIP = extent.sized(0.0)
logger.info("Total area of the design is #{CHIP.area} um^2.")

#================================================
#----------------- MAIN RUNSET ------------------
#================================================

logger.info('Starting GF180MCU DRC rules.')
logger.info('Running all FEOL rules') if FEOL

logger.info('Running all BEOL rules') if BEOL
# frozen_string_literal: true

################################################################################################
# Copyright 2022 GlobalFoundries PDK Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################################

if FEOL
  #================================================
  #----------------------COMP----------------------
  #================================================

  logger.info('Starting comp derivations')

  # Comp derivations
  comp_3p3v = comp.not_interacting(v5_xtor).not_interacting(dualgate)
  comp_56v = comp.overlapping(dualgate)

  ncomp_3p3v = nplus.and(comp_3p3v)
  ncomp_56v = nplus.and(comp_56v)

  pcomp_dn3p3v = pcomp.and(dnwell_3p3v)
  pcomp_dn56v = pcomp.and(dnwell_56v)

  ncomp_butted = ncomp.interacting(pcomp)

  ntap_dn3p3v = ntap_dn.and(dnwell_3p3v)
  ntap_dn56v = ntap_dn.and(dnwell_56v)

  nwell_n_dn3p3v = nwell_n_dn.not_interacting(v5_xtor).not_interacting(dualgate)
  nwell_n_dn56v = nwell_n_dn.overlapping(dualgate)

  ncomp_out_nw_dn = ncomp.not(nwell).not(dnwell)
  pcomp_out_nw_dn = pcomp.not(nwell).not(dnwell)

  # Rule DF.1a_LV: Min. COMP Width. is 0.22µm
  logger.info('Executing rule DF.1a_LV')
  df1a_l1 = comp_3p3v.width(0.22.um, euclidian)
  df1a_l1.output('DF.1a_LV', 'DF.1a_LV : Min. COMP Width. : 0.22µm')
  df1a_l1.forget

  # Rule DF.1a_MV: Min. COMP Width. is 0.3µm
  logger.info('Executing rule DF.1a_MV')
  df1a_l1 = comp_56v.not(mvsd.join(mvpsd)).width(0.3.um, euclidian)
  df1a_l1.output('DF.1a_MV', 'DF.1a_MV : Min. COMP Width. : 0.3µm')
  df1a_l1.forget

  # Rule DF.1b_LV is not a DRC check
  ## Please refer to https://gf180mcu-pdk.readthedocs.io/en/latest/physical_verification/design_manual/drm_07_06.html

  # Rule DF.1b_MV is not a DRC check
  ## Please refer to https://gf180mcu-pdk.readthedocs.io/en/latest/physical_verification/design_manual/drm_07_06.html

  # Rule DF.1c: Min. COMP Width for MOSCAP. is 1µm
  logger.info('Executing rule DF.1c')
  df1c_l1 = comp.and(mos_cap_mk).width(1.um, euclidian)
  df1c_l1.output('DF.1c', 'DF.1c : Min. COMP Width for MOSCAP. : 1µm')
  df1c_l1.forget

  # Rule DF.2a_LV: Min Channel Width. is 0.22µm
  logger.info('Executing rule DF.2a_LV')
  df_2a_3p3v = comp_3p3v.not(poly2).edges.and(tgate.edges)
  df2a_l1 = df_2a_3p3v.with_length(nil, 0.22.um)
  df2a_l1.output('DF.2a_LV', 'DF.2a_LV : Min Channel Width. : 0.22µm')
  df2a_l1.forget
  df_2a_3p3v.forget

  # Rule DF.2a_MV: Min Channel Width. is nil,0.3µm
  logger.info('Executing rule DF.2a_MV')
  df_2a_56v = comp_56v.not(poly2).edges.and(tgate.edges)
  df2a_l1 = df_2a_56v.with_length(nil, 0.3.um)
  df2a_l1.output('DF.2a_MV', 'DF.2a_MV : Min Channel Width. : nil,0.3µm')
  df2a_l1.forget
  df_2a_56v.forget

  # Rule DF.2b: Max. COMP width for all cases except those used for capacitors,
  ## marked by ‘MOS_CAP_MK’ layer. is 100um
  logger.info('Executing rule DF.2b')
  df2b_l1 = comp.not(mos_cap_mk).sized(-50.um).sized(50.um)
  df2b_l1.output('DF.2b',
                 "DF.2b : Max. COMP width for all cases except those used for capacitors,
                  marked by 'MOS_CAP_MK' layer: 100um")
  df2b_l1.forget

  # Rule DF.3a_LV:  Min. COMP Space : 0.28µm. [P-substrate tap (PCOMP outside NWELL and DNWELL)
  ## can be butted for different voltage devices as the potential is same]
  logger.info('Executing rule DF.3a_LV')
  df3a_l1 = comp_3p3v.not(otp_mk).space(0.28.um, euclidian)
  df3a_l1.output('DF.3a_LV',
                 'DF.3a_LV : Min. COMP Space is : 0.28µm. [P-substrate tap (PCOMP outside NWELL and DNWELL)
                  can be butted for different voltage devices as the potential is same]')
  df3a_l1.forget

  # Rule DF.3a_MV:  Min. COMP Space is : 0.36µm. [P-substrate tap (PCOMP outside NWELL and DNWELL)
  ## can be butted for different voltage devices as the potential is same]
  logger.info('Executing rule DF.3a_MV')
  df3a_l1 = comp_56v.not(otp_mk).space(0.36.um, euclidian)
  df3a_l1.output('DF.3a_MV',
                 'DF.3a_MV :  Min. COMP Space is : 0.36µm. [P-substrate tap (PCOMP outside NWELL and DNWELL)
                  can be butted for different voltage devices as the potential is same]')
  df3a_l1.forget

  # Rule DF.3b: Min./Max. NCOMP Space to PCOMP in the same well for butted COMP.
  ## (MOSCAP butting is not allowed). is 0 um
  logger.info('Executing rule DF.3b')
  df_3b_same_well = ntap.not_outside(pactive).join(ptap.not_outside(nactive))
  df_3b_moscap = ncomp_butted.and(mos_cap_mk)
  df3b_l1 = comp.and(df_3b_same_well.join(df_3b_moscap))
  df3b_l1.output('DF.3b',
                 'DF.3b : Min./Max. NCOMP Space to PCOMP in the same well for butted COMP
                  (MOSCAP butting is not allowed): 0 um')
  df3b_l1.forget

  # Rule DF.3c_LV: Min. COMP Space in BJT area (area marked by DRC_BJT layer). is 0.32µm
  logger.info('Executing rule DF.3c_LV')
  df3c_l1 = comp_3p3v.and(drc_bjt).space(0.32.um, euclidian)
  df3c_l1.output('DF.3c_LV', 'DF.3c_LV : Min. COMP Space in BJT area (area marked by DRC_BJT layer). : 0.32µm')
  df3c_l1.forget

  # Rule DF.3c_MV: Min. COMP Space in BJT area (area marked by DRC_BJT layer) hasn’t been assessed.
  logger.info('Executing rule DF.3c_MV')
  df3c_l1 = comp_56v.and(drc_bjt.interacting(comp_56v, 2))
  df3c_l1.output('DF.3c_MV',
                 "DF.3c_MV : Min. COMP Space in BJT area (area marked by DRC_BJT layer) hasn't been assessed.")
  df3c_l1.forget

  # Rule DF.4a_LV: Min. (LVPWELL Space to NCOMP well tap) inside DNWELL. is 0.12µm
  logger.info('Executing rule DF.4a_LV')
  df4a_l1 = ntap_dn3p3v.separation(lvpwell_dn3p3v, 0.12.um, euclidian)
  df4a_l1.output('DF.4a_LV', 'DF.4a_LV : Min. (LVPWELL Space to NCOMP well tap) inside DNWELL. : 0.12µm')
  df4a_l1.forget

  # Rule DF.4a_MV: Min. (LVPWELL Space to NCOMP well tap) inside DNWELL. is 0.16µm
  logger.info('Executing rule DF.4a_MV')
  df4a_l1 = ntap_dn56v.separation(lvpwell_dn56v, 0.16.um, euclidian)
  df4a_l1.output('DF.4a_MV', 'DF.4a_MV : Min. (LVPWELL Space to NCOMP well tap) inside DNWELL. : 0.16µm')
  df4a_l1.forget

  # Rule DF.4b_LV: Min. DNWELL overlap of NCOMP well tap. is 0.62µm
  logger.info('Executing rule DF.4b_LV')
  df4b_l1 = ntap_dn3p3v.enclosed(dnwell_3p3v, 0.62.um, euclidian)
  df4b_l1.output('DF.4b_LV', 'DF.4b_LV : Min. DNWELL overlap of NCOMP well tap. : 0.62µm')
  df4b_l1.forget
  ntap_dn3p3v.forget

  # Rule DF.4b_MV: Min. DNWELL overlap of NCOMP well tap. is 0.66µm
  logger.info('Executing rule DF.4b_MV')
  df4b_l1 = ntap_dn56v.enclosed(dnwell_56v, 0.66.um, euclidian)
  df4b_l1.output('DF.4b_MV', 'DF.4b_MV : Min. DNWELL overlap of NCOMP well tap. : 0.66µm')
  df4b_l1.forget
  ntap_dn56v.forget

  # Rule DF.4c_LV: Min. (Nwell overlap of PCOMP) outside DNWELL. is 0.43µm
  logger.info('Executing rule DF.4c_LV')
  nw_n_dn_n_srm = nwell_n_dn.not(sramcore)
  nw_n_dn_n_srm3p3v = nw_n_dn_n_srm.not_interacting(v5_xtor).not_interacting(dualgate)
  df4c_pcomp3p3v = pcomp.and(nw_n_dn_n_srm3p3v)
  df4c_l1 = df4c_pcomp3p3v.enclosed(nw_n_dn_n_srm3p3v, 0.43.um, euclidian)
  df4c_l1.output('DF.4c_LV', 'DF.4c_LV : Min. (Nwell overlap of PCOMP) outside DNWELL. : 0.43µm')
  df4c_l1.forget
  nw_n_dn_n_srm3p3v.forget
  df4c_pcomp3p3v.forget

  # Rule DF.4c_MV: Min. (Nwell overlap of PCOMP) outside DNWELL. is 0.6µm
  logger.info('Executing rule DF.4c_MV')
  nw_n_dn_n_srm56v = nw_n_dn_n_srm.overlapping(dualgate)
  df4c_pcomp56v = pcomp.and(nw_n_dn_n_srm56v)
  df4c_l1 = df4c_pcomp56v.enclosed(nw_n_dn_n_srm, 0.6.um, euclidian)
  df4c_l1.output('DF.4c_MV', 'DF.4c_MV : Min. (Nwell overlap of PCOMP) outside DNWELL. : 0.6µm')
  df4c_l1.forget
  nw_n_dn_n_srm56v.forget
  nw_n_dn_n_srm.forget
  df4c_pcomp56v.forget

  # Rule DF.4d_LV: Min. (Nwell overlap of NCOMP) outside DNWELL. is 0.12µm
  logger.info('Executing rule DF.4d_LV')
  df_4d_nwell = nwell_n_dn.not(ymtp_mk).not(neo_ee_mk)
  df_4d_ncomp3p3v = ncomp_3p3v.and(df_4d_nwell)
  df4d_l1 = df_4d_ncomp3p3v.enclosed(df_4d_nwell, 0.12.um, euclidian)
  df4d_l1.output('DF.4d_LV', 'DF.4d_LV : Min. (Nwell overlap of NCOMP) outside DNWELL. : 0.12µm')
  df4d_l1.forget
  df_4d_ncomp3p3v.forget

  # Rule DF.4d_MV: Min. (Nwell overlap of NCOMP) outside DNWELL. is 0.16µm
  logger.info('Executing rule DF.4d_MV')
  df_4d_ncomp56v = ncomp_56v.and(df_4d_nwell)
  df4d_l1 = df_4d_ncomp56v.enclosed(df_4d_nwell, 0.16.um, euclidian)
  df4d_l1.output('DF.4d_MV', 'DF.4d_MV : Min. (Nwell overlap of NCOMP) outside DNWELL. : 0.16µm')
  df4d_l1.forget
  df_4d_ncomp56v.forget

  # Rule DF.4e_LV: Min. DNWELL overlap of PCOMP. is 0.93µm
  logger.info('Executing rule DF.4e_LV')
  df4e_l1 = pcomp_dn3p3v.enclosed(dnwell_3p3v, 0.93.um, euclidian)
  df4e_l1.output('DF.4e_LV', 'DF.4e_LV : Min. DNWELL overlap of PCOMP. : 0.93µm')
  df4e_l1.forget

  # Rule DF.4e_MV: Min. DNWELL overlap of PCOMP. is 1.1µm
  logger.info('Executing rule DF.4e_MV')
  df4e_l1 = pcomp_dn56v.enclosed(dnwell_56v, 1.1.um, euclidian)
  df4e_l1.output('DF.4e_MV', 'DF.4e_MV : Min. DNWELL overlap of PCOMP. : 1.1µm')
  df4e_l1.forget

  # Rule DF.5_LV: Min. (LVPWELL overlap of PCOMP well tap) inside DNWELL. is 0.12µm
  logger.info('Executing rule DF.5_LV')
  df5_l1 = ptap.and(lvpwell_dn3p3v).enclosed(lvpwell_dn3p3v, 0.12.um, euclidian)
  df5_l1.output('DF.5_LV', 'DF.5_LV : Min. (LVPWELL overlap of PCOMP well tap) inside DNWELL. : 0.12µm')
  df5_l1.forget

  # Rule DF.5_MV: Min. (LVPWELL overlap of PCOMP well tap) inside DNWELL. is 0.16µm
  logger.info('Executing rule DF.5_MV')
  df5_l1 = ptap.and(lvpwell_dn56v).enclosed(lvpwell_dn56v, 0.16.um, euclidian)
  df5_l1.output('DF.5_MV', 'DF.5_MV : Min. (LVPWELL overlap of PCOMP well tap) inside DNWELL. : 0.16µm')
  df5_l1.forget

  # Rule DF.6_LV: Min. COMP extend beyond gate (it also means source/drain overhang). is 0.24µm
  logger.info('Executing rule DF.6_LV')
  df6_exclude = otp_mk.join(ymtp_mk).join(sramcore).join(mvsd).join(mvpsd)
  df6_comp = comp.interacting(tgate).not(df6_exclude)
  df6_poly = poly2.not(df6_exclude)
  df6_l1 = comp_3p3v.and(df6_comp).enclosing(df6_poly, 0.24.um, euclidian)
  df6_l1.output('DF.6_LV', 'DF.6_LV : Min. COMP extend beyond gate (it also means source/drain overhang). : 0.24µm')
  df6_l1.forget

  # Rule DF.6_MV: Min. COMP extend beyond gate (it also means source/drain overhang). is 0.4µm
  logger.info('Executing rule DF.6_MV')
  df6_l1 = comp_56v.and(df6_comp).enclosing(df6_poly, 0.4.um, euclidian)
  df6_l1.output('DF.6_MV', 'DF.6_MV : Min. COMP extend beyond gate (it also means source/drain overhang). : 0.4µm')
  df6_l1.forget
  df6_exclude.forget
  df6_comp.forget
  df6_poly.forget

  # Rule DF.7_LV: Min. (LVPWELL Spacer to PCOMP) inside DNWELL. is 0.43µm
  logger.info('Executing rule DF.7_LV')
  df7_l1 = pcomp_dn3p3v.separation(lvpwell_dn3p3v, 0.43.um, euclidian)
  df7_l1.output('DF.7_LV', 'DF.7_LV : Min. (LVPWELL Spacer to PCOMP) inside DNWELL. : 0.43µm')
  df7_l1.forget
  pcomp_dn3p3v.forget

  # Rule DF.7_MV: Min. (LVPWELL Spacer to PCOMP) inside DNWELL. is 0.6µm
  logger.info('Executing rule DF.7_MV')
  df7_l1 = pcomp_dn56v.not(sramcore).separation(lvpwell_dn56v, 0.6.um, euclidian)
  df7_l1.output('DF.7_MV', 'DF.7_MV : Min. (LVPWELL Spacer to PCOMP) inside DNWELL. : 0.6µm')
  df7_l1.forget
  pcomp_dn56v.forget

  # Rule DF.8_LV: Min. (LVPWELL overlap of NCOMP) Inside DNWELL. is 0.43µm
  logger.info('Executing rule DF.8_LV')
  ncomp_dn3p3v = ncomp.and(dnwell_3p3v)
  df8_l1 = ncomp_dn3p3v.and(lvpwell_dn3p3v).enclosed(lvpwell_dn3p3v, 0.43.um, euclidian)
  df8_l1.output('DF.8_LV', 'DF.8_LV : Min. (LVPWELL overlap of NCOMP) Inside DNWELL. : 0.43µm')
  df8_l1.forget
  ncomp_dn3p3v.forget

  # Rule DF.8_MV: Min. (LVPWELL overlap of NCOMP) Inside DNWELL. is 0.6µm
  logger.info('Executing rule DF.8_MV')
  ncomp_dn56v = ncomp.and(dnwell_56v)
  df8_l1 = ncomp_dn56v.and(lvpwell_dn56v).not(sramcore).enclosed(lvpwell_dn56v, 0.6.um, euclidian)
  df8_l1.output('DF.8_MV', 'DF.8_MV : Min. (LVPWELL overlap of NCOMP) Inside DNWELL. : 0.6µm')
  df8_l1.forget
  ncomp_dn56v.forget

  # Rule DF.9: Min. COMP area (um2). is 0.2025µm²
  logger.info('Executing rule DF.9')
  df9_l1 = comp.not(otp_mk).with_area(nil, 0.2025.um)
  df9_l1.output('DF.9', 'DF.9 : Min. COMP area (um2). : 0.2025µm²')
  df9_l1.forget

  # Rule DF.10: Min. field area (um2). is 0.26µm²
  logger.info('Executing rule DF.10')
  df10_l1 = comp.holes.not(comp).with_area(nil, 0.26.um)
  df10_l1.output('DF.10', 'DF.10 : Min. field area (um2). : 0.26µm²')
  df10_l1.forget

  # Rule DF.11: Min. Length of butting COMP edge. is 0.3µm
  logger.info('Executing rule DF.11')
  df11_l1 = comp.interacting(ncomp_butted).width(0.3.um)
  df11_l1.output('DF.11', 'DF.11 : Min. Length of butting COMP edge. : 0.3µm')
  df11_l1.forget
  ncomp_butted.forget

  # Rule DF.12: COMP not covered by Nplus or Pplus is forbidden (except those COMP under marking).
  logger.info('Executing rule DF.12')
  df12_l1 = comp.not_interacting(schottky_diode).not(nplus).not(pplus)
  df12_l1.output('DF.12',
                 'DF.12 : COMP not covered by Nplus or Pplus is forbidden (except those COMP under marking).')
  df12_l1.forget

  # Preparations for rule DF.13_LV and DF.13_MV:
  # Size ntap by 15 and 20um, staying inside nwell always.
  # Use octagon_limit to approximate a circle.
  # Use steps of 0.5, which is compatible with min space of nwell (0.6)
  # hence we do not cross over to other nwell islands.
  logger.info('Preparations for rule DF.13_LV and DF.13_MV')
  df13_ntap_sized = ntap
  sz = 0.0
  while sz < 15.0
    df13_ntap_sized = df13_ntap_sized.sized(0.5.um, octagon_limit).and(nwell)
    sz += 0.5
  end
  df13_ntap_sized_by15 = df13_ntap_sized
  while sz < 20.0
    df13_ntap_sized = df13_ntap_sized.sized(0.5.um, octagon_limit).and(nwell)
    sz += 0.5
  end
  df13_ntap_sized_by20 = df13_ntap_sized

  # Rule DF.13_LV: Max distance of Nwell tap (NCOMP inside Nwell) from (PCOMP inside Nwell) is 20um.
  logger.info('Executing rule DF.13_LV')
  pactive_3p3v = pactive.not_interacting(v5_xtor).not_interacting(dualgate)
  df13_l1 = pactive_3p3v.not_interacting(df13_ntap_sized_by20)
  df13_l1.output('DF.13_LV',
                 'DF.13_LV : Max distance of Nwell tap (NCOMP inside Nwell) from (PCOMP inside Nwell): 20um')
  df13_l1.forget
  pactive_3p3v.forget
  df13_ntap_sized_by20.forget

  # Rule DF.13_MV: Max distance of Nwell tap (NCOMP inside Nwell) from (PCOMP inside Nwell) is 15um.
  logger.info('Executing rule DF.13_MV')
  pactive_56v = pactive.overlapping(dualgate)
  df13_l1 = pactive_56v.not_interacting(df13_ntap_sized_by15)
  df13_l1.output('DF.13_MV',
                 'DF.13_MV : Max distance of Nwell tap (NCOMP inside Nwell) from (PCOMP inside Nwell): 15um')
  df13_l1.forget
  pactive_56v.forget
  df13_ntap_sized_by15.forget

  # Rule DF.14_LV: Max distance of substrate tap (PCOMP outside Nwell) from (NCOMP outside Nwell) is 20um.
  logger.info('Executing rule DF.14_LV')
  nactive_3p3v = nactive.not_interacting(v5_xtor).not_interacting(dualgate)
  df14_poss_bad_active = nactive_3p3v.not_interacting(ptap.sized(20.0.um, diamond_limit))
  df14_good_active = df14_poss_bad_active.sep(ptap, 20.0.um).polygons
  df14_l1 = df14_poss_bad_active.not_interacting(df14_good_active)
  df14_l1.output('DF.14_LV',
                 'DF.14_LV : Max distance of substrate tap (PCOMP outside Nwell) from (NCOMP outside Nwell): 20um')
  df14_l1.forget
  nactive_3p3v.forget
  df14_poss_bad_active.forget
  df14_good_active.forget

  # Rule DF.14_MV: Max distance of substrate tap (PCOMP outside Nwell) from (NCOMP outside Nwell) is 15um.
  logger.info('Executing rule DF.14_MV')
  nactive_56v = nactive.overlapping(dualgate)
  df14_poss_bad_active = nactive_56v.not_interacting(ptap.sized(15.0.um, diamond_limit))
  df14_good_active = df14_poss_bad_active.sep(ptap, 15.0.um).polygons
  df14_l1 = df14_poss_bad_active.not_interacting(df14_good_active)
  df14_l1.output('DF.14_MV',
                 'DF.14_MV : Max distance of substrate tap (PCOMP outside Nwell) from (NCOMP outside Nwell): 15um')
  df14_l1.forget
  nactive_56v.forget
  df14_poss_bad_active.forget
  df14_good_active.forget

  # Rule DF.15a_LV is not a DRC check
  ## Please refer to https://gf180mcu-pdk.readthedocs.io/en/latest/physical_verification/design_manual/drm_07_06.html

  # Rule DF.15a_MV is not a DRC check
  ## Please refer to https://gf180mcu-pdk.readthedocs.io/en/latest/physical_verification/design_manual/drm_07_06.html

  # Rule DF.15b_LV is not a DRC check
  ## Please refer to https://gf180mcu-pdk.readthedocs.io/en/latest/physical_verification/design_manual/drm_07_06.html

  # Rule DF.15b_MV is not a DRC check
  ## Please refer to https://gf180mcu-pdk.readthedocs.io/en/latest/physical_verification/design_manual/drm_07_06.html

  # Rule DF.16_LV: Min. space from (Nwell outside DNWELL) to (NCOMP outside Nwell and DNWELL). is 0.43µm
  logger.info('Executing rule DF.16_LV')
  df16_l1 = ncomp_out_nw_dn.interacting(ncomp_3p3v).not(ymtp_mk.join(sramcore)).separation(
    nwell_n_dn3p3v.not(ymtp_mk), 0.43.um, euclidian
  )
  df16_l1.output('DF.16_LV',
                 'DF.16_LV : Min. space from (Nwell outside DNWELL) to (NCOMP outside Nwell and DNWELL). : 0.43µm')
  df16_l1.forget

  # Rule DF.16_MV: Min. space from (Nwell outside DNWELL) to (NCOMP outside Nwell and DNWELL). is 0.6µm
  logger.info('Executing rule DF.16_MV')
  df16_l1 = ncomp_out_nw_dn.interacting(ncomp_56v).not_inside(ymtp_mk.join(sramcore)).separation(
    nwell_n_dn56v.not(ymtp_mk), 0.6.um, euclidian
  )
  df16_l1.output('DF.16_MV',
                 'DF.16_MV : Min. space from (Nwell outside DNWELL) to (NCOMP outside Nwell and DNWELL). : 0.6µm')
  df16_l1.forget

  # Rule DF.17_LV: Min. space from (Nwell Outside DNWELL) to (PCOMP outside Nwell and DNWELL) is 0.12µm.
  logger.info('Executing rule DF.17_LV')
  pcomp_3p3v = pplus.and(comp_3p3v)
  df17_l1 = pcomp_3p3v.and(pcomp_out_nw_dn).separation(nwell_n_dn3p3v, 0.12.um, euclidian)
  df17_l1.output('DF.17_LV',
                 'DF.17_LV : Min. space from (Nwell Outside DNWELL) to (PCOMP outside Nwell and DNWELL). : 0.12µm')
  df17_l1.forget
  nwell_n_dn3p3v.forget
  pcomp_3p3v.forget

  # Rule DF.17_MV: Min. space from (Nwell Outside DNWELL) to (PCOMP outside Nwell and DNWELL) is 0.16µm.
  logger.info('Executing rule DF.17_MV')
  pcomp_56v = pplus.and(comp_56v)
  df17_l1 = pcomp_56v.and(pcomp_out_nw_dn).separation(nwell_n_dn56v, 0.16.um, euclidian)
  df17_l1.output('DF.17_MV',
                 'DF.17_MV : Min. space from (Nwell Outside DNWELL) to (PCOMP outside Nwell and DNWELL). : 0.16µm')
  df17_l1.forget
  nwell_n_dn56v.forget
  pcomp_56v.forget

  # Rule DF.18: Min. DNWELL space to (PCOMP outside Nwell and DNWELL) is 2.5µm.
  logger.info('Executing rule DF.18')
  df18_l1 = pcomp_out_nw_dn.separation(dnwell, 2.5.um, euclidian)
  df18_l1.output('DF.18', 'DF.18 : Min. DNWELL space to (PCOMP outside Nwell and DNWELL). : 2.5µm')
  df18_l1.forget
  pcomp_out_nw_dn.forget

  # Rule DF.19_LV: Min. DNWELL space to (NCOMP outside Nwell and DNWELL) is 3.2µm.
  logger.info('Executing rule DF.19_LV')
  df19_l1 = ncomp_out_nw_dn.interacting(ncomp_3p3v).separation(dnwell, 3.2.um, euclidian)
  df19_l1.output('DF.19_LV', 'DF.19_LV : Min. DNWELL space to (NCOMP outside Nwell and DNWELL). : 3.2µm')
  df19_l1.forget
  ncomp_3p3v.forget

  # Rule DF.19_MV: Min. DNWELL space to (NCOMP outside Nwell and DNWELL) is 3.28µm.
  logger.info('Executing rule DF.19_MV')
  df19_l1 = ncomp_out_nw_dn.interacting(ncomp_56v).separation(dnwell, 3.28.um, euclidian)
  df19_l1.output('DF.19_MV', 'DF.19_MV : Min. DNWELL space to (NCOMP outside Nwell and DNWELL). : 3.28µm')
  df19_l1.forget
  ncomp_out_nw_dn.forget
  ncomp_56v.forget
  comp_3p3v.forget
  comp_56v.forget

end
# frozen_string_literal: true

################################################################################################
# Copyright 2022 GlobalFoundries PDK Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################################

exec_end_time = Time.now
run_time = exec_end_time - exec_start_time
logger.info("#{$table_name} DRC Total Run time #{run_time} seconds")
