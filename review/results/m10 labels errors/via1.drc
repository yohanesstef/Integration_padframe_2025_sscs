# frozen_string_literal: true

################################################################################################
# Copyright 2023 GlobalFoundries PDK Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################################

#=======================================================================================================================
#--------------------------------------------- GF 0.18um MCU DRC RULE DECK ---------------------------------------------
#=======================================================================================================================
require 'time'
require 'logger'
require 'etc'

exec_start_time = Time.now

logger = Logger.new($stdout)

logger.formatter = proc do |_severity, datetime, _progname, msg|
  "#{datetime}: Memory Usage (" + `pmap #{Process.pid} | tail -1`[10, 40].strip + ") : #{msg}
"
end

#================================================
#----------------- FILE SETUP -------------------
#================================================
logger.info("Starting running GF180MCU Klayout DRC runset on #{$input}")
logger.info("Ruby Version for klayout: #{RUBY_VERSION}")

if $input
  if $topcell
    source($input, $topcell)
  else
    source($input)
  end
end

logger.info('Loading database to memory is complete.')

if $report
  logger.info("GF180MCU Klayout DRC runset output at: #{$report}")
  report('DRC Run Report at', $report)
else
  layout_dir = Pathname.new(RBA::CellView.active.filename).parent.realpath
  report_path = layout_dir.join('gf180_drc.lyrdb').to_s
  logger.info("GF180MCU Klayout DRC runset output at default location: #{report_path}")
  report('DRC Run Report at', report_path)
end

#================================================
#------------------ SWITCHES --------------------
#================================================
logger.info('Evaluate switches.')

def bool_check?(obj)
  obj.to_s.downcase == 'true'
end

TABLE_NAME = $table_name || 'main'

logger.info("table_name selected  #{TABLE_NAME}")

# connectivity rules
CONNECTIVITY_EN = bool_check?($conn_drc)

conn_tables = %w[dnwell dnwell_split nwell nwell_split lvpwell
                 lvpwell_split nat nat_split ldnmos ldnmos_split ldpmos ldpmos_split main]

CONNECTIVITY_RULES = if conn_tables.include?(TABLE_NAME) && CONNECTIVITY_EN
                       true
                     else
                       false
                     end

logger.info("CONNECTIVITY_RULES enabled: #{CONNECTIVITY_RULES}")

# split deep rules
SPLIT_DEEP = bool_check?($split_deep)

# WEDGE
WEDGE = bool_check?($wedge)

logger.info("Wedge enabled: #{WEDGE}")

# BALL
BALL = bool_check?($ball)

logger.info("Ball enabled: #{BALL}")

# GOLD
GOLD = bool_check?($gold)

logger.info("Gold enabled: #{GOLD}")

# MIM
MIM_OPTION = $mim_option || 'B'

logger.info("MIM Option selected: #{MIM_OPTION}")

# OFFGRID
OFFGRID = $offgrid != 'false'

logger.info("Offgrid enabled:  #{OFFGRID}")

# threads
if $thr
  threads($thr)
else
  thr ||= Etc.nprocessors
  threads(thr)
end

logger.info("Number of threads to use #{$thr}")

#=== PRINT DETAILS ===

verbose(bool_check?($verbose))

logger.info("Verbose mode: #{$verbose}")

# === TILING MODE ===
case $run_mode
## Tiling mode is for testing purpose only [Not used in run_drc.py]
when 'tiling'
  tiles(500.um)
  tile_borders(50.um)
  logger.info('Tiling  mode is enabled.')

when 'deep'
  #=== HIER MODE ===
  deep
  logger.info("deep  mode is enabled for #{TABLE_NAME} table")
else
  #=== FLAT MODE ===
  flat
  logger.info("flat  mode is enabled for #{TABLE_NAME} table")
end

# METAL_TOP
METAL_TOP = $metal_top || '9K'

logger.info("METAL_TOP Selected is #{METAL_TOP}")

# METAL_LEVEL
METAL_LEVEL = $metal_level || '5LM'

logger.info("METAL_STACK Selected is #{METAL_LEVEL}")

# FEOL
FEOL = bool_check?($feol)

logger.info("FEOL enabled: #{FEOL}")

# BEOL
BEOL = bool_check?($beol)

logger.info("BEOL enabled: #{BEOL}")

## SLOW_VIA
SLOW_VIA = bool_check?($slow_via)

logger.info("SLOW_VIA enabled: #{SLOW_VIA}")

#================================================
#------------- LAYERS DEFINITIONS ---------------
#================================================

# %include layers_def.drc

#=====================================================
#------------- BASE LAYERS DERIVATIONS ---------------
#=====================================================

dnwell_n        = dnwell.not(lvpwell)
dnwell_p        = dnwell.and(lvpwell)

all_nwell       = dnwell_n.join(nwell)

ncomp           = comp.and(nplus)
pcomp           = comp.and(pplus)
tgate           = poly2.and(comp).not(res_mk)

nactive         = ncomp.not(all_nwell)
ngate           = nactive.and(tgate)
nsd             = nactive.interacting(ngate).not(ngate).not(res_mk)
ptap            = pcomp.not(all_nwell).not(res_mk)

pactive         = pcomp.and(all_nwell)
pgate           = pactive.and(tgate)
psd             = pactive.interacting(pgate).not(pgate).not(res_mk)
ntap            = ncomp.and(all_nwell).not(res_mk)

ngate_dn        = ngate.and(dnwell_p)
ptap_dn         = ptap.and(dnwell_p).outside(well_diode_mk)

pgate_dn        = pgate.and(dnwell_n)
ntap_dn         = ntap.and(dnwell_n)

psd_dn          = pcomp.and(dnwell_n).interacting(pgate_dn).not(pgate_dn).not(res_mk)
nsd_dn          = ncomp.and(dnwell_p).interacting(ngate_dn).not(ngate_dn).not(res_mk)

natcomp        	= nat.and(comp)

# Gate
nom_gate = tgate.not(dualgate)
thick_gate = tgate.and(dualgate)

ngate_56v = ngate.and(dualgate)
pgate_56v = pgate.and(dualgate)

ngate_5v = ngate_56v.and(v5_xtor)
pgate_5v = pgate_56v.and(v5_xtor)

ngate_6v = ngate_56v.not(v5_xtor)
pgate_6v = pgate_56v.not(v5_xtor)

# DNWELL
dnwell_3p3v = dnwell.not_interacting(v5_xtor).not_interacting(dualgate)
dnwell_56v = dnwell.overlapping(dualgate)

# LVPWELL
lvpwell_dn = lvpwell.interacting(dnwell)
lvpwell_out = lvpwell.not_interacting(dnwell)

lvpwell_dn3p3v = lvpwell.and(dnwell_3p3v)
lvpwell_dn56v = lvpwell.and(dnwell_56v)

# NWELL
nwell_dn = nwell.interacting(dnwell)
nwell_n_dn = nwell.not_interacting(dnwell)

#================================================
#------------- LAYERS CONNECTIONS ---------------
#================================================

if CONNECTIVITY_RULES
  logger.info('Construct connectivity for the design.')

  connect(dnwell, ncomp)
  connect(lvpwell_out, pcomp)
  connect(lvpwell_dn, pcomp)
  connect(nwell, ncomp)
  connect(mvsd, ncomp)
  connect(mvpsd, pcomp)

  if contact_tables.include?(TABLE_NAME)
    connect(ncomp,  contact)
    connect(pcomp,  contact)
    connect(natcomp, contact)
    connect(contact, metal1)
  end

  if via1_tables.include?(TABLE_NAME)
    connect(metal1,  via1)
    connect(via1,    metal2)
  end

  case METAL_LEVEL
  when '3LM', '4LM', '5LM', '6LM'
    if via2_tables.include?(TABLE_NAME)
      connect(metal2,  via2)
      connect(via2,    metal3)
    end
  end
  case METAL_LEVEL
  when '4LM', '5LM', '6LM'
    connect(metal3,  via3)
    connect(via3,    metal4)
  end
  case METAL_LEVEL
  when '5LM', '6LM'
    connect(metal4,  via4)
    connect(via4,    metal5)
  end
  case METAL_LEVEL
  when '6LM'
    connect(metal5,  via5)
    connect(via5,    metaltop)
  end
end

#================================================
#------------ PRE-DEFINED FUNCTIONS -------------
#================================================

def unconn_errors_check(net1, net2, unconnected_errors)
  if !net1 || !net2
    logger.error("Connectivity check encountered 2 nets that doesn't exist. Potential issue in klayout...")
  elsif net1.circuit != net2.circuit || net1.cluster_id != net2.cluster_id
    # unconnected
    unconnected_errors.data.insert(ep)
  end
  unconnected_errors
end

def get_nets(_data, layer1, layer2, edge_pairs)
  net1 = l2n_data.probe_net(layer1.data, edge_pairs.first.p1)
  net2 = l2n_data.probe_net(layer2.data, edge_pairs.second.p1)
  [net1, net2]
end

def conn_space_viol(layer, conn_val, mode)
  connected_output = layer.space(conn_val.um, mode).polygons(0.001.um)
  singularity_errors = layer.space(0.001.um, mode).polygons(0.001.um)
  [connected_output, singularity_errors]
end

def conn_space_check(layer, not_conn_val, mode)
  unconnected_errors_unfiltered = layer.space(not_conn_val.um, mode)
  connected_output, singularity_errors = conn_space_viol(layer, conn_val, mode)
  # Filter out the errors arising from the same net
  unconnected_errors = DRC::DRCLayer.new(self, RBA::EdgePairs.new)
  unconnected_errors_unfiltered.data.each do |ep|
    net1, net2 = get_nets(l2n_data, layer, layer, ep)
    unconnected_errors = unconn_errors_check(net1, net2, unconnected_errors)
  end
  unconnected_output = unconnected_errors.polygons.join(singularity_errors)
  [connected_output, unconnected_output]
end

def conn_space_nets(layer, conn_val, not_conn_val, mode)
  nets = layer.nets
  connected_output = nets.space(conn_val.um, mode, props_eq).polygons(0.001.um)
  singularity_errors = nets.space(0.001.um, mode).polygons(0.001.um)
  unconnected_output = nets.space(not_conn_val.um, mode, props_ne).polygons(0.001.um).join(singularity_errors)
  [connected_output, unconnected_output]
end

def conn_space(layer, conn_val, not_conn_val, mode)
  if layer.respond_to?(:nets) # KLayout version (>=0.28.4) which supports "nets"
    connected_output, unconnected_output = conn_space_nets(layer, conn_val, not_conn_val, mode)
  else
    raise 'ERROR : Wrong connectivity implementation' if conn_val > not_conn_val

    connected_output, unconnected_output = conn_space_check(layer, not_conn_val, mode)
  end
  [connected_output, unconnected_output]
end

def sep_viol_nets(layer1, layer2, conn_val, not_conn_val, mode)
  connected_output   = layer1.nets.separation(layer2.nets, conn_val.um,     mode, props_eq).polygons(0.001.um)
  unconnected_output = layer1.nets.separation(layer2.nets, not_conn_val.um, mode, props_ne).polygons(0.001.um)
  [connected_output, unconnected_output]
end

def unconn_separation_check(layer1, layer2, not_conn_val, mode)
  unconnected_errors_unfiltered = layer1.separation(layer2, not_conn_val.um, mode)
  # Filter out the errors arising from the same net
  unconnected_errors = DRC::DRCLayer.new(self, RBA::EdgePairs.new)
  unconnected_errors_unfiltered.data.each do |ep|
    net1, net2 = get_nets(l2n_data, layer1, layer2, ep)
    unconnected_errors = unconn_errors(net1, net2, unconnected_errors)
  end
  unconnected_errors
end

def conn_separation(layer1, layer2, conn_val, not_conn_val, mode)
  if layer1.respond_to?(:nets) # KLayout version (>=0.28.4) which supports "nets"
    connected_output, unconnected_output = sep_viol_nets(layer1, layer2, conn_val, not_conn_val, mode)
  else
    raise 'ERROR : Wrong connectivity implementation' if conn_val > not_conn_val

    connected_output = layer1.separation(layer2, conn_val.um, mode).polygons(0.001.um)
    unconnected_errors = unconn_separation_check(layer1, layer2, not_conn_val, mode)
    unconnected_output = unconnected_errors.polygons(0.001.um)
  end
  [connected_output, unconnected_output]
end

def size_overunder_in_layers(large_layer, size_layer, size_value)
  out_layer = DRC::DRCLayer.new(self, RBA::Region.new)
  large_layer.data.each do |ep|
    curr_large_layer = DRC::DRCLayer.new(self, RBA::Region.new(ep))
    curr_large_layer = curr_large_layer.and(size_layer)
    curr_large_layer = curr_large_layer.sized(size_value, 'square_limit').merged.sized(-size_value, 'square_limit')
    out_layer.data.insert(curr_large_layer.data)
  end
  out_layer
end

# === IMPLICIT EXTRACTION ===
if CONNECTIVITY_RULES
  logger.info('Connectivity rules enabled, Netlist object will be generated.')
  netlist
end

# === LAYOUT EXTENT ===
CHIP = extent.sized(0.0)
logger.info("Total area of the design is #{CHIP.area} um^2.")

#================================================
#----------------- MAIN RUNSET ------------------
#================================================

logger.info('Starting GF180MCU DRC rules.')
logger.info('Running all FEOL rules') if FEOL

logger.info('Running all BEOL rules') if BEOL
# frozen_string_literal: true

################################################################################################
# Copyright 2023 GlobalFoundries PDK Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################################

if BEOL
  #================================================
  #----------------------via1----------------------
  #================================================

  # Rule V1.1: Min/max Via1 size . is 0.26µm
  logger.info('Executing rule V1.1')
  v11_l1 = via1.edges.without_length(0.26.um)
  v11_l1.output('V1.1', 'V1.1 : Min/max Via1 size . : 0.26µm')
  v11_l1.forget

  # Rule V1.2a: min. via1 spacing is 0.26µm
  logger.info('Executing rule V1.2a')
  v12a_l1 = via1.space(0.26.um, euclidian)
  v12a_l1.output('V1.2a', 'V1.2a : min. via1 spacing : 0.26µm')
  v12a_l1.forget

  # Rule V1.2b: Via1 Space in 4x4 or larger via1 array is 0.36µm
  logger.info('Executing rule V1.2b')
  via1_egde_length = 0.26 * 3 + 3 * 0.36
  poss_4_4_via1 = via1.sized(0.2, 'square_limit').merged.sized(-0.2, 'square_limit')
  via1_4x4_all = poss_4_4_via1.with_bbox_min(via1_egde_length..nil).interacting(via1, 16..nil)
  via1_4x4_loc_exc = via1_4x4_all.width(via1_egde_length,
                                        projection_limits(via1_egde_length..1000 * via1_egde_length)).polygons
  via1_4x4_loc = via1_4x4_all.not_interacting(via1_4x4_loc_exc)
  selected_via1 = via1.interacting(via1_4x4_loc)
  via1b_l1 = selected_via1.space(0.36.um, projecting >= 0.26.um)
  via1b_l1.output('V1.2b', 'V1.2b : Via1 Space in 4x4 or larger via1 array : 0.36µm')
  via1b_l1.forget
  poss_4_4_via1.forget
  via1_4x4_all.forget
  via1_4x4_loc_exc.forget
  via1_4x4_loc.forget
  selected_via1.forget

  # Rule V1.3a: metal1 overlap of via1 is 0 um.
  logger.info('Executing rule V1.3a')
  v13a_l1 = via1.not(metal1)
  v13a_l1.output('V1.3a', 'V1.3a : metal1 overlap of via1 >= 0.0')
  v13a_l1.forget

  # Rule V1.3b is not a DRC check
  ## Please refer to https://gf180mcu-pdk.readthedocs.io/en/latest/physical_verification/design_manual/drm_07_15.html

  unless SPLIT_DEEP
    # Rule V1.3c: metal1 (< 0.34um) end-of-line overlap. (Applies to all < 0.34µm wide Metal lines,
    ## excluding Metal branches shorter than 0.28µm.) is 0.06µm
    logger.info('Executing rule V1.3c')
    sel_metal1_3c = metal1.not(metal1.sized(-0.17.um).size(0.17.um))
    sel_via1_3c = via1.interacting(sel_metal1_3c)

    logger.info('Executing rule V1.3c metal1 pre selection')
    sel_metal_edges = metal1.edges.not_outside(sel_metal1_3c.edges)
    v1p3c_cond = sel_metal_edges.width(0.34.um, projection).with_length(0.28.um, nil, both)

    logger.info('Executing rule V1.3c metal1 selection')
    v1p3c_eol_allowed = metal1.edges.with_length(nil, 0.34.um)
    v1p3c_cond_edge1 = v1p3c_cond.first_edges
    v1p3c_cond_edge2 = v1p3c_cond.second_edges

    logger.info('Executing rule V1.3c metal1 EOL selection')
    v1p3c_eol = v1p3c_eol_allowed.interacting(v1p3c_cond_edge1).interacting(v1p3c_cond_edge2)
                                 .not(v1p3c_cond_edge1).not(v1p3c_cond_edge2)
    v1p3c_l1 = via1.edges.enclosed(v1p3c_eol, 0.06.um, projection)
    v1p3c_l1.output('V1.3c', 'V1.3c : metal1 (< 0.34um) end-of-line overlap. (Applies to all < 0.34µm wide Metal lines,
                    excluding Metal branches shorter than 0.28µm.) : 0.06µm')
    v1p3c_l1.forget
    v1p3c_cond.forget
    v1p3c_eol.forget
    v1p3c_cond_edge1.forget
    v1p3c_cond_edge2.forget
    sel_metal1_3c.forget
    sel_via1_3c.forget
    sel_metal_edges.forget
    v1p3c_eol_allowed.forget

    # Rule V1.3d: If metal1 overlap via1 by < 0.04um on one side, adjacent metal1 edges overlap. : 0.06µm
    logger.info('Executing rule V1.3d')
    sel_via1_3c = via1.not_inside(metal1.sized(-0.04.um))
    sel_metal_3c = metal1.interacting(sel_via1_3c)

    logger.info('Executing rule V1.3d selection')
    via1_3d_cond_edges = sel_via1_3c.edges.not_outside(sel_via1_3c.enclosed(sel_metal_3c.sized(0.001.um), 0.04.um, projection).edges)

    logger.info('Executing rule V1.3d --> enclose')
    via1_3d_check_corner = via1_3d_cond_edges.extended_in(0.002.um)

    logger.info('Executing rule V1.3d --> corner')
    via1_3d_check = sel_via1_3c.edges.interacting(via1_3d_check_corner).not(via1_3d_cond_edges)
    via1_cond_corner = via1_3d_cond_edges.width(0.002.um, angle_limit(135)).polygons

    logger.info('Executing rule V1.3d --> result_1')
    via1_3d_l1 = via1_3d_check.enclosed(metal1.edges, 0.06.um, projection).polygons

    logger.info('Executing rule V1.3d --> result_2')
    via1_3d_l2 = via1.interacting(via1_cond_corner)
    via1_3d_l = via1_3d_l1.join(via1_3d_l2)
    via1_3d_l.output('V1.3d',
                     'V1.3d : If metal1 overlap via1 by < 0.04um on one side, adjacent metal1 edges overlap. : 0.06µm')
    via1_3d_l.forget
    via1_3d_l2.forget
    via1_3d_l1.forget
    via1_3d_cond_edges.forget
    via1_3d_check_corner.forget
    via1_cond_corner.forget
    via1_3d_check.forget
    sel_via1_3c.forget
    sel_metal_3c.forget

    # Rule V1.3e is not a DRC check
    ## Please refer to https://gf180mcu-pdk.readthedocs.io/en/latest/physical_verification/design_manual/drm_07_15.html

    # Rule V1.4a: metal2 overlap of via1.
    logger.info('Executing rule V1.4a')
    via1_4a_l1 = via1.enclosed(metal2, 0.01.um, euclidian).polygons(0.001.um)
    via1_4a_l2 = via1.not(metal2)
    via1_4a_l = via1_4a_l1.join(via1_4a_l2)
    via1_4a_l.output('V1.4a', 'V1.4a : metal2 overlap of via1 >= 0.01 um')
    via1_4a_l1.forget
    via1_4a_l2.forget
    via1_4a_l.forget

    # Rule V1.4b: metal2 (< 0.34um) end-of-line overlap. (Applies to all < 0.34µm wide Metal lines,
    ## excluding Metal branches shorter than 0.28µm.) is 0.06µm
    logger.info('Executing rule V1.4b')
    v1p4b_cond = metal2.width(0.34.um + 1.dbu).with_length(0.28.um, nil, both)
    v1p4b_eol_allowed = metal2.edges.with_length(nil, 0.34.um)
    v1p4b_eol = v1p4b_eol_allowed.interacting(v1p4b_cond.first_edges).interacting(v1p4b_cond.second_edges)
                                 .not(v1p4b_cond.first_edges).not(v1p4b_cond.second_edges)
    v1p4b_l1 = via1.edges.enclosed(v1p4b_eol, 0.06.um, projection)
    v1p4b_l1.output('V1.4b', 'V1.4p : metal2 (< 0.34um) end-of-line overlap. (Applies to all < 0.34µm wide Metal lines,
                    excluding Metal branches shorter than 0.28µm.) : 0.06µm')
    v1p4b_l1.forget
    v1p4b_cond.forget
    v1p4b_eol.forget
    v1p4b_eol_allowed.forget

    # Rule V1.4c: If metal2 overlap via1 by < 0.04um on one side, adjacent metal2 edges overlap. : 0.06µm
    logger.info('Executing rule V1.4c')
    via1_4c_cond_edges = via1.edges.not_outside(via1.enclosed(metal2, 0.04.um, projection).edges)
    via1_4c_check_corner = via1_4c_cond_edges.extended_in(0.002.um)
    via1_4c_check = via1.edges.interacting(via1_4c_check_corner).not(via1_4c_cond_edges)
    via1_4c_cond_corner = via1_4c_cond_edges.width(0.002.um, angle_limit(135)).polygons
    via1_4c_l1 = via1_4c_check.enclosed(metal2.edges, 0.06.um, projection).polygons
    via1_4c_l2 = via1.interacting(via1_4c_cond_corner)
    via1_4c_l = via1_4c_l1.join(via1_4c_l2)
    via1_4c_l.output('V1.4c',
                     'V1.4c : If metal2 overlap via1 by < 0.04um on one side, adjacent metal2 edges overlap. : 0.06µm')
    via1_4c_l.forget
    via1_4c_l2.forget
    via1_4c_l1.forget
    via1_4c_cond_edges.forget
    via1_4c_check_corner.forget
    via1_4c_cond_corner.forget
    via1_4c_check.forget
  end
end
# frozen_string_literal: true

################################################################################################
# Copyright 2022 GlobalFoundries PDK Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################################

exec_end_time = Time.now
run_time = exec_end_time - exec_start_time
logger.info("#{$table_name} DRC Total Run time #{run_time} seconds")
