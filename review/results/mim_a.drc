# frozen_string_literal: true

################################################################################################
# Copyright 2023 GlobalFoundries PDK Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################################

#=======================================================================================================================
#--------------------------------------------- GF 0.18um MCU DRC RULE DECK ---------------------------------------------
#=======================================================================================================================
require 'time'
require 'logger'
require 'etc'

exec_start_time = Time.now

logger = Logger.new($stdout)

logger.formatter = proc do |_severity, datetime, _progname, msg|
  "#{datetime}: Memory Usage (" + `pmap #{Process.pid} | tail -1`[10, 40].strip + ") : #{msg}
"
end

#================================================
#----------------- FILE SETUP -------------------
#================================================
logger.info("Starting running GF180MCU Klayout DRC runset on #{$input}")
logger.info("Ruby Version for klayout: #{RUBY_VERSION}")

if $input
  if $topcell
    source($input, $topcell)
  else
    source($input)
  end
end

logger.info('Loading database to memory is complete.')

if $report
  logger.info("GF180MCU Klayout DRC runset output at: #{$report}")
  report('DRC Run Report at', $report)
else
  layout_dir = Pathname.new(RBA::CellView.active.filename).parent.realpath
  report_path = layout_dir.join('gf180_drc.lyrdb').to_s
  logger.info("GF180MCU Klayout DRC runset output at default location: #{report_path}")
  report('DRC Run Report at', report_path)
end

#================================================
#------------------ SWITCHES --------------------
#================================================
logger.info('Evaluate switches.')

def bool_check?(obj)
  obj.to_s.downcase == 'true'
end

TABLE_NAME = $table_name || 'main'

logger.info("table_name selected  #{TABLE_NAME}")

# connectivity rules
CONNECTIVITY_EN = bool_check?($conn_drc)

conn_tables = %w[dnwell dnwell_split nwell nwell_split lvpwell
                 lvpwell_split nat nat_split ldnmos ldnmos_split ldpmos ldpmos_split main]

CONNECTIVITY_RULES = if conn_tables.include?(TABLE_NAME) && CONNECTIVITY_EN
                       true
                     else
                       false
                     end

logger.info("CONNECTIVITY_RULES enabled: #{CONNECTIVITY_RULES}")

# split deep rules
SPLIT_DEEP = bool_check?($split_deep)

# WEDGE
WEDGE = bool_check?($wedge)

logger.info("Wedge enabled: #{WEDGE}")

# BALL
BALL = bool_check?($ball)

logger.info("Ball enabled: #{BALL}")

# GOLD
GOLD = bool_check?($gold)

logger.info("Gold enabled: #{GOLD}")

# MIM
MIM_OPTION = $mim_option || 'B'

logger.info("MIM Option selected: #{MIM_OPTION}")

# OFFGRID
OFFGRID = $offgrid != 'false'

logger.info("Offgrid enabled:  #{OFFGRID}")

# threads
if $thr
  threads($thr)
else
  thr ||= Etc.nprocessors
  threads(thr)
end

logger.info("Number of threads to use #{$thr}")

#=== PRINT DETAILS ===

verbose(bool_check?($verbose))

logger.info("Verbose mode: #{$verbose}")

# === TILING MODE ===
case $run_mode
## Tiling mode is for testing purpose only [Not used in run_drc.py]
when 'tiling'
  tiles(500.um)
  tile_borders(50.um)
  logger.info('Tiling  mode is enabled.')

when 'deep'
  #=== HIER MODE ===
  deep
  logger.info("deep  mode is enabled for #{TABLE_NAME} table")
else
  #=== FLAT MODE ===
  flat
  logger.info("flat  mode is enabled for #{TABLE_NAME} table")
end

# METAL_TOP
METAL_TOP = $metal_top || '9K'

logger.info("METAL_TOP Selected is #{METAL_TOP}")

# METAL_LEVEL
METAL_LEVEL = $metal_level || '5LM'

logger.info("METAL_STACK Selected is #{METAL_LEVEL}")

# FEOL
FEOL = bool_check?($feol)

logger.info("FEOL enabled: #{FEOL}")

# BEOL
BEOL = bool_check?($beol)

logger.info("BEOL enabled: #{BEOL}")

## SLOW_VIA
SLOW_VIA = bool_check?($slow_via)

logger.info("SLOW_VIA enabled: #{SLOW_VIA}")

#================================================
#------------- LAYERS DEFINITIONS ---------------
#================================================

# %include layers_def.drc

#=====================================================
#------------- BASE LAYERS DERIVATIONS ---------------
#=====================================================

dnwell_n        = dnwell.not(lvpwell)
dnwell_p        = dnwell.and(lvpwell)

all_nwell       = dnwell_n.join(nwell)

ncomp           = comp.and(nplus)
pcomp           = comp.and(pplus)
tgate           = poly2.and(comp).not(res_mk)

nactive         = ncomp.not(all_nwell)
ngate           = nactive.and(tgate)
nsd             = nactive.interacting(ngate).not(ngate).not(res_mk)
ptap            = pcomp.not(all_nwell).not(res_mk)

pactive         = pcomp.and(all_nwell)
pgate           = pactive.and(tgate)
psd             = pactive.interacting(pgate).not(pgate).not(res_mk)
ntap            = ncomp.and(all_nwell).not(res_mk)

ngate_dn        = ngate.and(dnwell_p)
ptap_dn         = ptap.and(dnwell_p).outside(well_diode_mk)

pgate_dn        = pgate.and(dnwell_n)
ntap_dn         = ntap.and(dnwell_n)

psd_dn          = pcomp.and(dnwell_n).interacting(pgate_dn).not(pgate_dn).not(res_mk)
nsd_dn          = ncomp.and(dnwell_p).interacting(ngate_dn).not(ngate_dn).not(res_mk)

natcomp        	= nat.and(comp)

# Gate
nom_gate = tgate.not(dualgate)
thick_gate = tgate.and(dualgate)

ngate_56v = ngate.and(dualgate)
pgate_56v = pgate.and(dualgate)

ngate_5v = ngate_56v.and(v5_xtor)
pgate_5v = pgate_56v.and(v5_xtor)

ngate_6v = ngate_56v.not(v5_xtor)
pgate_6v = pgate_56v.not(v5_xtor)

# DNWELL
dnwell_3p3v = dnwell.not_interacting(v5_xtor).not_interacting(dualgate)
dnwell_56v = dnwell.overlapping(dualgate)

# LVPWELL
lvpwell_dn = lvpwell.interacting(dnwell)
lvpwell_out = lvpwell.not_interacting(dnwell)

lvpwell_dn3p3v = lvpwell.and(dnwell_3p3v)
lvpwell_dn56v = lvpwell.and(dnwell_56v)

# NWELL
nwell_dn = nwell.interacting(dnwell)
nwell_n_dn = nwell.not_interacting(dnwell)

#================================================
#------------- LAYERS CONNECTIONS ---------------
#================================================

if CONNECTIVITY_RULES
  logger.info('Construct connectivity for the design.')

  connect(dnwell, ncomp)
  connect(lvpwell_out, pcomp)
  connect(lvpwell_dn, pcomp)
  connect(nwell, ncomp)
  connect(mvsd, ncomp)
  connect(mvpsd, pcomp)

  if contact_tables.include?(TABLE_NAME)
    connect(ncomp,  contact)
    connect(pcomp,  contact)
    connect(natcomp, contact)
    connect(contact, metal1)
  end

  if via1_tables.include?(TABLE_NAME)
    connect(metal1,  via1)
    connect(via1,    metal2)
  end

  case METAL_LEVEL
  when '3LM', '4LM', '5LM', '6LM'
    if via2_tables.include?(TABLE_NAME)
      connect(metal2,  via2)
      connect(via2,    metal3)
    end
  end
  case METAL_LEVEL
  when '4LM', '5LM', '6LM'
    connect(metal3,  via3)
    connect(via3,    metal4)
  end
  case METAL_LEVEL
  when '5LM', '6LM'
    connect(metal4,  via4)
    connect(via4,    metal5)
  end
  case METAL_LEVEL
  when '6LM'
    connect(metal5,  via5)
    connect(via5,    metaltop)
  end
end

#================================================
#------------ PRE-DEFINED FUNCTIONS -------------
#================================================

def unconn_errors_check(net1, net2, unconnected_errors)
  if !net1 || !net2
    logger.error("Connectivity check encountered 2 nets that doesn't exist. Potential issue in klayout...")
  elsif net1.circuit != net2.circuit || net1.cluster_id != net2.cluster_id
    # unconnected
    unconnected_errors.data.insert(ep)
  end
  unconnected_errors
end

def get_nets(_data, layer1, layer2, edge_pairs)
  net1 = l2n_data.probe_net(layer1.data, edge_pairs.first.p1)
  net2 = l2n_data.probe_net(layer2.data, edge_pairs.second.p1)
  [net1, net2]
end

def conn_space_viol(layer, conn_val, mode)
  connected_output = layer.space(conn_val.um, mode).polygons(0.001.um)
  singularity_errors = layer.space(0.001.um, mode).polygons(0.001.um)
  [connected_output, singularity_errors]
end

def conn_space_check(layer, not_conn_val, mode)
  unconnected_errors_unfiltered = layer.space(not_conn_val.um, mode)
  connected_output, singularity_errors = conn_space_viol(layer, conn_val, mode)
  # Filter out the errors arising from the same net
  unconnected_errors = DRC::DRCLayer.new(self, RBA::EdgePairs.new)
  unconnected_errors_unfiltered.data.each do |ep|
    net1, net2 = get_nets(l2n_data, layer, layer, ep)
    unconnected_errors = unconn_errors_check(net1, net2, unconnected_errors)
  end
  unconnected_output = unconnected_errors.polygons.join(singularity_errors)
  [connected_output, unconnected_output]
end

def conn_space_nets(layer, conn_val, not_conn_val, mode)
  nets = layer.nets
  connected_output = nets.space(conn_val.um, mode, props_eq).polygons(0.001.um)
  singularity_errors = nets.space(0.001.um, mode).polygons(0.001.um)
  unconnected_output = nets.space(not_conn_val.um, mode, props_ne).polygons(0.001.um).join(singularity_errors)
  [connected_output, unconnected_output]
end

def conn_space(layer, conn_val, not_conn_val, mode)
  if layer.respond_to?(:nets) # KLayout version (>=0.28.4) which supports "nets"
    connected_output, unconnected_output = conn_space_nets(layer, conn_val, not_conn_val, mode)
  else
    raise 'ERROR : Wrong connectivity implementation' if conn_val > not_conn_val

    connected_output, unconnected_output = conn_space_check(layer, not_conn_val, mode)
  end
  [connected_output, unconnected_output]
end

def sep_viol_nets(layer1, layer2, conn_val, not_conn_val, mode)
  connected_output   = layer1.nets.separation(layer2.nets, conn_val.um,     mode, props_eq).polygons(0.001.um)
  unconnected_output = layer1.nets.separation(layer2.nets, not_conn_val.um, mode, props_ne).polygons(0.001.um)
  [connected_output, unconnected_output]
end

def unconn_separation_check(layer1, layer2, not_conn_val, mode)
  unconnected_errors_unfiltered = layer1.separation(layer2, not_conn_val.um, mode)
  # Filter out the errors arising from the same net
  unconnected_errors = DRC::DRCLayer.new(self, RBA::EdgePairs.new)
  unconnected_errors_unfiltered.data.each do |ep|
    net1, net2 = get_nets(l2n_data, layer1, layer2, ep)
    unconnected_errors = unconn_errors(net1, net2, unconnected_errors)
  end
  unconnected_errors
end

def conn_separation(layer1, layer2, conn_val, not_conn_val, mode)
  if layer1.respond_to?(:nets) # KLayout version (>=0.28.4) which supports "nets"
    connected_output, unconnected_output = sep_viol_nets(layer1, layer2, conn_val, not_conn_val, mode)
  else
    raise 'ERROR : Wrong connectivity implementation' if conn_val > not_conn_val

    connected_output = layer1.separation(layer2, conn_val.um, mode).polygons(0.001.um)
    unconnected_errors = unconn_separation_check(layer1, layer2, not_conn_val, mode)
    unconnected_output = unconnected_errors.polygons(0.001.um)
  end
  [connected_output, unconnected_output]
end

def size_overunder_in_layers(large_layer, size_layer, size_value)
  out_layer = DRC::DRCLayer.new(self, RBA::Region.new)
  large_layer.data.each do |ep|
    curr_large_layer = DRC::DRCLayer.new(self, RBA::Region.new(ep))
    curr_large_layer = curr_large_layer.and(size_layer)
    curr_large_layer = curr_large_layer.sized(size_value, 'square_limit').merged.sized(-size_value, 'square_limit')
    out_layer.data.insert(curr_large_layer.data)
  end
  out_layer
end

# === IMPLICIT EXTRACTION ===
if CONNECTIVITY_RULES
  logger.info('Connectivity rules enabled, Netlist object will be generated.')
  netlist
end

# === LAYOUT EXTENT ===
CHIP = extent.sized(0.0)
logger.info("Total area of the design is #{CHIP.area} um^2.")

#================================================
#----------------- MAIN RUNSET ------------------
#================================================

logger.info('Starting GF180MCU DRC rules.')
logger.info('Running all FEOL rules') if FEOL

logger.info('Running all BEOL rules') if BEOL
# frozen_string_literal: true

################################################################################################
# Copyright 2022 GlobalFoundries PDK Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################################

if MIM_OPTION == 'A'
  #================================================
  #------------MIM CAPACITOR OPTION A -------------
  #================================================

  logger.info('MIM Capacitor Option A section')

  mim_virtual = fusetop.sized(1.06.um).and(metal2.interacting(fusetop))

  # Rule MIM.1: Minimum MiM bottom plate spacing to the bottom plate metal
  ## (whether adjacent MiM or routing metal). is 1.2µm
  logger.info('Executing rule MIM.1')
  mim1_l1 = metal2.separation(mim_virtual, transparent, 1.2.um)
  mim1_l1.output('MIM.1', 'MIM.1 : Minimum MiM bottom plate spacing to the bottom plate metal
                 (whether adjacent MiM or routing metal). : 1.2µm')
  mim1_l1.forget

  # Rule MIM.2: Minimum MiM bottom plate overlap of Via2 layer.
  ## [This is applicable for via2 within 1.06um oversize of FuseTop layer
  ## (referenced to virtual bottom plate)]. is 0.4µm
  logger.info('Executing rule MIM.2')
  mim2_via = via2.overlapping(mim_virtual)
  mim2_l1 = mim2_via.enclosed(metal2, 0.4.um, euclidian).polygons(0.001.um)
  mim2_l2 = mim2_via.not_outside(metal2).not(metal2)
  mim2_l  = mim2_l1.join(mim2_l2)
  mim2_l.output('MIM.2', 'MIM.2 : Minimum MiM bottom plate overlap of Via2 layer.
                 [This is applicable for via2 within 1.06um oversize of FuseTop layer
                 (referenced to virtual bottom plate)]. : 0.4µm')
  mim2_l1.forget
  mim2_l2.forget
  mim2_l.forget
  mim2_via.forget

  # Rule MIM.3: Minimum MiM bottom plate overlap of Top plate.
  logger.info('Executing rule MIM.3')
  mim3_l1 = fusetop.enclosed(mim_virtual, 0.6.um).polygons(0.001.um)
  mim3_l2 = fusetop.not_inside(mim_virtual)
  mim3_l = mim3_l1.join(mim3_l2)
  mim3_l.output('MIM.3', 'MIM.3 : Minimum MiM bottom plate overlap of Top plate.')
  mim3_l1.forget
  mim3_l2.forget
  mim_virtual.forget

  # Rule MIM.4: Minimum MiM top plate (FuseTop) overlap of Via2. is 0.4µm
  logger.info('Executing rule MIM.4')
  mim4_l1 = via2.enclosed(fusetop, 0.4.um, euclidian).polygons(0.001.um)
  mim4_l2 = via2.not_outside(fusetop).not(fusetop)
  mim4_l  = mim4_l1.join(mim4_l2)
  mim4_l.output('MIM.4', 'MIM.4 : Minimum MiM top plate (FuseTop) overlap of Via2. : 0.4µm')
  mim4_l1.forget
  mim4_l2.forget
  mim4_l.forget

  # Rule MIM.5: Minimum spacing between top plate and
  ## the Via2 connecting to the bottom plate. is 0.4µm
  logger.info('Executing rule MIM.5')
  mim5_l1 = fusetop.separation(via2.interacting(metal2), 0.4.um, euclidian)
  mim5_l1.output('MIM.5', 'MIM.5 : Minimum spacing between top plate and
                  the Via2 connecting to the bottom plate. : 0.4µm')
  mim5_l1.forget

  # Rule MIM.6: Minimum spacing between unrelated top plates. is 0.6µm
  logger.info('Executing rule MIM.6')
  mim6_l1 = fusetop.space(0.6.um, euclidian)
  mim6_l1.output('MIM.6', 'MIM.6 : Minimum spacing between unrelated top plates. : 0.6µm')
  mim6_l1.forget

  # Rule MIM.7: Min FuseTop enclosure by CAP_MK is 0um.
  logger.info('Executing rule MIM.7')
  mim7_l1 = fusetop.not(cap_mk)
  mim7_l1.output('MIM.7', 'MIM.7 : Min FuseTop enclosure by CAP_MK: 0um')
  mim7_l1.forget

  # Rule MIM.8a: Minimum MIM cap area (defined by FuseTop area) is 25µm².
  logger.info('Executing rule MIM.8a')
  mim8a_l1 = fusetop.with_area(nil, 25.um)
  mim8a_l1.output('MIM.8a', 'MIM.8a : Minimum MIM cap area (defined by FuseTop area): 25µm²')
  mim8a_l1.forget

  # Rule MIM.8b: Maximum single MIM Cap area (Use multiple MIM caps in parallel
  ## connection if bigger capacitors are required) (um2). is 10000µm
  logger.info('Executing rule MIM.8b')
  mim8b_l1 = fusetop.with_area(10_001.um, nil)
  mim8b_l1.output('MIM.8b', 'MIM.8b : Maximum single MIM Cap area (Use multiple MIM caps in parallel
                   connection if bigger capacitors are required) (um2). : 10000µm')
  mim8b_l1.forget

  # Rule MIM.9: Min. via spacing for sea of via on MIM top plate. is 0.5µm
  logger.info('Executing rule MIM.9')
  mim9_l1 = via2.and(fusetop).space(0.5.um, euclidian)
  mim9_l1.output('MIM.9', 'MIM.9 : Min. via spacing for sea of via on MIM top plate. : 0.5µm')
  mim9_l1.forget

  # Rule MIM.10: (a) There cannot be any Via1 touching MIM bottom plate Metal2.
  ## (b) MIM bottom plate Metal2 can only be connected through the higher Via (Via2).
  logger.info('Executing rule MIM.10')
  mim10_l1 = via1.and(metal2.and(fusetop))
  mim10_l1.output('MIM.10', 'MIM.10 : (a) There cannot be any Via1 touching MIM bottom plate Metal2.
                  (b) MIM bottom plate Metal2 can only be connected through the higher Via (Via2).')
  mim10_l1.forget

  # Rule MIM.11: Bottom plate of multiple MIM caps can be shared (for common nodes)
  # as long as total MIM area with that single common plate does not exceed MIM.8b rule.
  logger.info('Executing rule MIM.11')
  mim11_large_metal2 = metal2.interacting(fusetop).with_area(10_000, nil)
  mim11_large_metal2_violation = polygon_layer
  mim11_large_metal2.data.each do |p|
    mim11_metal2_polygon_layer = polygon_layer
    mim11_metal2_polygon_layer.data.insert(p)
    fuse_in_polygon = fusetop.and(mim11_metal2_polygon_layer)
    next unless fuse_in_polygon.area > 10_000

    mim11_bad_metal2_polygon = mim11_metal2_polygon_layer.interacting(fuse_in_polygon)
    mim11_bad_metal2_polygon.data.each do |b|
      b.num_points.positive? && mim11_large_metal2_violation.data.insert(b)
    end
  end
  mim11_l1 = mim11_large_metal2_violation
  mim11_l1.output('MIM.11', 'MIM.11 : Bottom plate of multiple MIM caps can be shared (for common nodes)
                  as long as total MIM area with that single common plate does not exceed MIM.8b rule.')
  mim11_l1.forget
  mim11_large_metal2.forget
  mim11_large_metal2_violation.forget

  # Rule MIM.12 is not a DRC check
  ## Please refer to https://gf180mcu-pdk.readthedocs.io/en/latest/physical_verification/design_manual/drm_10_4_1.html

end
# frozen_string_literal: true

################################################################################################
# Copyright 2022 GlobalFoundries PDK Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################################

exec_end_time = Time.now
run_time = exec_end_time - exec_start_time
logger.info("#{$table_name} DRC Total Run time #{run_time} seconds")
