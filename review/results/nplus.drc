# frozen_string_literal: true

################################################################################################
# Copyright 2023 GlobalFoundries PDK Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################################

#=======================================================================================================================
#--------------------------------------------- GF 0.18um MCU DRC RULE DECK ---------------------------------------------
#=======================================================================================================================
require 'time'
require 'logger'
require 'etc'

exec_start_time = Time.now

logger = Logger.new($stdout)

logger.formatter = proc do |_severity, datetime, _progname, msg|
  "#{datetime}: Memory Usage (" + `pmap #{Process.pid} | tail -1`[10, 40].strip + ") : #{msg}
"
end

#================================================
#----------------- FILE SETUP -------------------
#================================================
logger.info("Starting running GF180MCU Klayout DRC runset on #{$input}")
logger.info("Ruby Version for klayout: #{RUBY_VERSION}")

if $input
  if $topcell
    source($input, $topcell)
  else
    source($input)
  end
end

logger.info('Loading database to memory is complete.')

if $report
  logger.info("GF180MCU Klayout DRC runset output at: #{$report}")
  report('DRC Run Report at', $report)
else
  layout_dir = Pathname.new(RBA::CellView.active.filename).parent.realpath
  report_path = layout_dir.join('gf180_drc.lyrdb').to_s
  logger.info("GF180MCU Klayout DRC runset output at default location: #{report_path}")
  report('DRC Run Report at', report_path)
end

#================================================
#------------------ SWITCHES --------------------
#================================================
logger.info('Evaluate switches.')

def bool_check?(obj)
  obj.to_s.downcase == 'true'
end

TABLE_NAME = $table_name || 'main'

logger.info("table_name selected  #{TABLE_NAME}")

# connectivity rules
CONNECTIVITY_EN = bool_check?($conn_drc)

conn_tables = %w[dnwell dnwell_split nwell nwell_split lvpwell
                 lvpwell_split nat nat_split ldnmos ldnmos_split ldpmos ldpmos_split main]

CONNECTIVITY_RULES = if conn_tables.include?(TABLE_NAME) && CONNECTIVITY_EN
                       true
                     else
                       false
                     end

logger.info("CONNECTIVITY_RULES enabled: #{CONNECTIVITY_RULES}")

# split deep rules
SPLIT_DEEP = bool_check?($split_deep)

# WEDGE
WEDGE = bool_check?($wedge)

logger.info("Wedge enabled: #{WEDGE}")

# BALL
BALL = bool_check?($ball)

logger.info("Ball enabled: #{BALL}")

# GOLD
GOLD = bool_check?($gold)

logger.info("Gold enabled: #{GOLD}")

# MIM
MIM_OPTION = $mim_option || 'B'

logger.info("MIM Option selected: #{MIM_OPTION}")

# OFFGRID
OFFGRID = $offgrid != 'false'

logger.info("Offgrid enabled:  #{OFFGRID}")

# threads
if $thr
  threads($thr)
else
  thr ||= Etc.nprocessors
  threads(thr)
end

logger.info("Number of threads to use #{$thr}")

#=== PRINT DETAILS ===

verbose(bool_check?($verbose))

logger.info("Verbose mode: #{$verbose}")

# === TILING MODE ===
case $run_mode
## Tiling mode is for testing purpose only [Not used in run_drc.py]
when 'tiling'
  tiles(500.um)
  tile_borders(50.um)
  logger.info('Tiling  mode is enabled.')

when 'deep'
  #=== HIER MODE ===
  deep
  logger.info("deep  mode is enabled for #{TABLE_NAME} table")
else
  #=== FLAT MODE ===
  flat
  logger.info("flat  mode is enabled for #{TABLE_NAME} table")
end

# METAL_TOP
METAL_TOP = $metal_top || '9K'

logger.info("METAL_TOP Selected is #{METAL_TOP}")

# METAL_LEVEL
METAL_LEVEL = $metal_level || '5LM'

logger.info("METAL_STACK Selected is #{METAL_LEVEL}")

# FEOL
FEOL = bool_check?($feol)

logger.info("FEOL enabled: #{FEOL}")

# BEOL
BEOL = bool_check?($beol)

logger.info("BEOL enabled: #{BEOL}")

## SLOW_VIA
SLOW_VIA = bool_check?($slow_via)

logger.info("SLOW_VIA enabled: #{SLOW_VIA}")

#================================================
#------------- LAYERS DEFINITIONS ---------------
#================================================

# %include layers_def.drc

#=====================================================
#------------- BASE LAYERS DERIVATIONS ---------------
#=====================================================

dnwell_n        = dnwell.not(lvpwell)
dnwell_p        = dnwell.and(lvpwell)

all_nwell       = dnwell_n.join(nwell)

ncomp           = comp.and(nplus)
pcomp           = comp.and(pplus)
tgate           = poly2.and(comp).not(res_mk)

nactive         = ncomp.not(all_nwell)
ngate           = nactive.and(tgate)
nsd             = nactive.interacting(ngate).not(ngate).not(res_mk)
ptap            = pcomp.not(all_nwell).not(res_mk)

pactive         = pcomp.and(all_nwell)
pgate           = pactive.and(tgate)
psd             = pactive.interacting(pgate).not(pgate).not(res_mk)
ntap            = ncomp.and(all_nwell).not(res_mk)

ngate_dn        = ngate.and(dnwell_p)
ptap_dn         = ptap.and(dnwell_p).outside(well_diode_mk)

pgate_dn        = pgate.and(dnwell_n)
ntap_dn         = ntap.and(dnwell_n)

psd_dn          = pcomp.and(dnwell_n).interacting(pgate_dn).not(pgate_dn).not(res_mk)
nsd_dn          = ncomp.and(dnwell_p).interacting(ngate_dn).not(ngate_dn).not(res_mk)

natcomp        	= nat.and(comp)

# Gate
nom_gate = tgate.not(dualgate)
thick_gate = tgate.and(dualgate)

ngate_56v = ngate.and(dualgate)
pgate_56v = pgate.and(dualgate)

ngate_5v = ngate_56v.and(v5_xtor)
pgate_5v = pgate_56v.and(v5_xtor)

ngate_6v = ngate_56v.not(v5_xtor)
pgate_6v = pgate_56v.not(v5_xtor)

# DNWELL
dnwell_3p3v = dnwell.not_interacting(v5_xtor).not_interacting(dualgate)
dnwell_56v = dnwell.overlapping(dualgate)

# LVPWELL
lvpwell_dn = lvpwell.interacting(dnwell)
lvpwell_out = lvpwell.not_interacting(dnwell)

lvpwell_dn3p3v = lvpwell.and(dnwell_3p3v)
lvpwell_dn56v = lvpwell.and(dnwell_56v)

# NWELL
nwell_dn = nwell.interacting(dnwell)
nwell_n_dn = nwell.not_interacting(dnwell)

#================================================
#------------- LAYERS CONNECTIONS ---------------
#================================================

if CONNECTIVITY_RULES
  logger.info('Construct connectivity for the design.')

  connect(dnwell, ncomp)
  connect(lvpwell_out, pcomp)
  connect(lvpwell_dn, pcomp)
  connect(nwell, ncomp)
  connect(mvsd, ncomp)
  connect(mvpsd, pcomp)

  if contact_tables.include?(TABLE_NAME)
    connect(ncomp,  contact)
    connect(pcomp,  contact)
    connect(natcomp, contact)
    connect(contact, metal1)
  end

  if via1_tables.include?(TABLE_NAME)
    connect(metal1,  via1)
    connect(via1,    metal2)
  end

  case METAL_LEVEL
  when '3LM', '4LM', '5LM', '6LM'
    if via2_tables.include?(TABLE_NAME)
      connect(metal2,  via2)
      connect(via2,    metal3)
    end
  end
  case METAL_LEVEL
  when '4LM', '5LM', '6LM'
    connect(metal3,  via3)
    connect(via3,    metal4)
  end
  case METAL_LEVEL
  when '5LM', '6LM'
    connect(metal4,  via4)
    connect(via4,    metal5)
  end
  case METAL_LEVEL
  when '6LM'
    connect(metal5,  via5)
    connect(via5,    metaltop)
  end
end

#================================================
#------------ PRE-DEFINED FUNCTIONS -------------
#================================================

def unconn_errors_check(net1, net2, unconnected_errors)
  if !net1 || !net2
    logger.error("Connectivity check encountered 2 nets that doesn't exist. Potential issue in klayout...")
  elsif net1.circuit != net2.circuit || net1.cluster_id != net2.cluster_id
    # unconnected
    unconnected_errors.data.insert(ep)
  end
  unconnected_errors
end

def get_nets(_data, layer1, layer2, edge_pairs)
  net1 = l2n_data.probe_net(layer1.data, edge_pairs.first.p1)
  net2 = l2n_data.probe_net(layer2.data, edge_pairs.second.p1)
  [net1, net2]
end

def conn_space_viol(layer, conn_val, mode)
  connected_output = layer.space(conn_val.um, mode).polygons(0.001.um)
  singularity_errors = layer.space(0.001.um, mode).polygons(0.001.um)
  [connected_output, singularity_errors]
end

def conn_space_check(layer, not_conn_val, mode)
  unconnected_errors_unfiltered = layer.space(not_conn_val.um, mode)
  connected_output, singularity_errors = conn_space_viol(layer, conn_val, mode)
  # Filter out the errors arising from the same net
  unconnected_errors = DRC::DRCLayer.new(self, RBA::EdgePairs.new)
  unconnected_errors_unfiltered.data.each do |ep|
    net1, net2 = get_nets(l2n_data, layer, layer, ep)
    unconnected_errors = unconn_errors_check(net1, net2, unconnected_errors)
  end
  unconnected_output = unconnected_errors.polygons.join(singularity_errors)
  [connected_output, unconnected_output]
end

def conn_space_nets(layer, conn_val, not_conn_val, mode)
  nets = layer.nets
  connected_output = nets.space(conn_val.um, mode, props_eq).polygons(0.001.um)
  singularity_errors = nets.space(0.001.um, mode).polygons(0.001.um)
  unconnected_output = nets.space(not_conn_val.um, mode, props_ne).polygons(0.001.um).join(singularity_errors)
  [connected_output, unconnected_output]
end

def conn_space(layer, conn_val, not_conn_val, mode)
  if layer.respond_to?(:nets) # KLayout version (>=0.28.4) which supports "nets"
    connected_output, unconnected_output = conn_space_nets(layer, conn_val, not_conn_val, mode)
  else
    raise 'ERROR : Wrong connectivity implementation' if conn_val > not_conn_val

    connected_output, unconnected_output = conn_space_check(layer, not_conn_val, mode)
  end
  [connected_output, unconnected_output]
end

def sep_viol_nets(layer1, layer2, conn_val, not_conn_val, mode)
  connected_output   = layer1.nets.separation(layer2.nets, conn_val.um,     mode, props_eq).polygons(0.001.um)
  unconnected_output = layer1.nets.separation(layer2.nets, not_conn_val.um, mode, props_ne).polygons(0.001.um)
  [connected_output, unconnected_output]
end

def unconn_separation_check(layer1, layer2, not_conn_val, mode)
  unconnected_errors_unfiltered = layer1.separation(layer2, not_conn_val.um, mode)
  # Filter out the errors arising from the same net
  unconnected_errors = DRC::DRCLayer.new(self, RBA::EdgePairs.new)
  unconnected_errors_unfiltered.data.each do |ep|
    net1, net2 = get_nets(l2n_data, layer1, layer2, ep)
    unconnected_errors = unconn_errors(net1, net2, unconnected_errors)
  end
  unconnected_errors
end

def conn_separation(layer1, layer2, conn_val, not_conn_val, mode)
  if layer1.respond_to?(:nets) # KLayout version (>=0.28.4) which supports "nets"
    connected_output, unconnected_output = sep_viol_nets(layer1, layer2, conn_val, not_conn_val, mode)
  else
    raise 'ERROR : Wrong connectivity implementation' if conn_val > not_conn_val

    connected_output = layer1.separation(layer2, conn_val.um, mode).polygons(0.001.um)
    unconnected_errors = unconn_separation_check(layer1, layer2, not_conn_val, mode)
    unconnected_output = unconnected_errors.polygons(0.001.um)
  end
  [connected_output, unconnected_output]
end

def size_overunder_in_layers(large_layer, size_layer, size_value)
  out_layer = DRC::DRCLayer.new(self, RBA::Region.new)
  large_layer.data.each do |ep|
    curr_large_layer = DRC::DRCLayer.new(self, RBA::Region.new(ep))
    curr_large_layer = curr_large_layer.and(size_layer)
    curr_large_layer = curr_large_layer.sized(size_value, 'square_limit').merged.sized(-size_value, 'square_limit')
    out_layer.data.insert(curr_large_layer.data)
  end
  out_layer
end

# === IMPLICIT EXTRACTION ===
if CONNECTIVITY_RULES
  logger.info('Connectivity rules enabled, Netlist object will be generated.')
  netlist
end

# === LAYOUT EXTENT ===
CHIP = extent.sized(0.0)
logger.info("Total area of the design is #{CHIP.area} um^2.")

#================================================
#----------------- MAIN RUNSET ------------------
#================================================

logger.info('Starting GF180MCU DRC rules.')
logger.info('Running all FEOL rules') if FEOL

logger.info('Running all BEOL rules') if BEOL
# frozen_string_literal: true

################################################################################################
# Copyright 2022 GlobalFoundries PDK Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################################

if FEOL
  #================================================
  #---------------------NPLUS----------------------
  #================================================

  logger.info('Starting NPLUS derivations')

  nplus_edges = nplus.edges
  pcomp_edges = pcomp.edges
  nplus_n_dn = nplus.not(dnwell)
  ncomp_butted = ncomp.interacting(pcomp)
  nplus_butted_edges = nplus.edges.and(pcomp.edges)
  nwell_n_dn_sized_out = nwell_n_dn.sized(0.429.um)
  nwell_n_dn_sized_in  = nwell_n_dn.sized(-0.429.um)
  lvpwell_dn_sized_out = lvpwell_dn.sized(0.429.um)
  lvpwell_dn_sized_in  = lvpwell_dn.sized(-0.429.um)

  # Rule NP.1: min. nplus width is 0.4µm
  logger.info('Executing rule NP.1')
  np1_l1 = nplus.width(0.4.um, euclidian)
  np1_l1.output('NP.1', 'NP.1 : min. nplus width : 0.4µm')
  np1_l1.forget

  # Rule NP.2: min. nplus spacing is 0.4µm
  logger.info('Executing rule NP.2')
  np2_l1 = nplus.space(0.4.um, euclidian)
  np2_l1.output('NP.2', 'NP.2 : min. nplus spacing : 0.4µm')
  np2_l1.forget

  # Rule NP.3a: Space to PCOMP for PCOMP:
  ## (1) Inside Nwell (2) Outside LVPWELL but inside DNWELL. is 0.16µm
  logger.info('Executing rule NP.3a')
  np3_nplus = nplus.not_interacting(ncomp_butted)
  np3a_pcomp = pcomp.and(nwell).join(pcomp.not(lvpwell).and(dnwell))
  np3a_l1 = np3_nplus.separation(np3a_pcomp, 0.16.um, euclidian)
  np3a_l1.output('NP.3a', 'NP.3a : Space to PCOMP for PCOMP:
                  (1) Inside Nwell (2) Outside LVPWELL but inside DNWELL. : 0.16µm')
  np3a_l1.forget
  np3a_pcomp.forget

  # Rule NP.3bi: Space to PCOMP: For Inside DNWELL, inside LVPWELL:
  ## (i) For PCOMP overlap by LVPWELL < 0.43um is 0.16µm.
  logger.info('Executing rule NP.3bi')
  np_3bi_pcomp = pcomp.and(lvpwell_dn.not(lvpwell_dn_sized_in))
  np3bi_l1 = np3_nplus.and(lvpwell_dn).separation(np_3bi_pcomp, 0.16.um, euclidian)
  np3bi_l1.output('NP.3bi', 'NP.3bi : Space to PCOMP: For Inside DNWELL, inside LVPWELL:
                   (i) For PCOMP overlap by LVPWELL < 0.43um. : 0.16µm')
  np3bi_l1.forget
  np_3bi_pcomp.forget

  # Rule NP.3bii: Space to PCOMP: For Inside DNWELL, inside LVPWELL:
  ## (ii) For PCOMP overlap by LVPWELL >= 0.43um. is 0.08µm
  logger.info('Executing rule NP.3bii')
  np_3bii_pcomp = pcomp.and(lvpwell_dn_sized_in)
  np3bii_l1 = np3_nplus.and(lvpwell_dn).separation(np_3bii_pcomp, 0.08.um, euclidian)
  np3bii_l1.output('NP.3bii', 'NP.3bii : Space to PCOMP: For Inside DNWELL, inside LVPWELL:
                    (ii) For PCOMP overlap by LVPWELL >= 0.43um. : 0.08µm')
  np3bii_l1.forget
  np_3bii_pcomp.forget

  # Rule NP.3ci: Space to PCOMP: For Outside DNWELL:
  ## (i) For PCOMP space to Nwell < 0.43um. is 0.16µm
  logger.info('Executing rule NP.3ci')
  np_3ci_pcomp = pcomp.not(dnwell).and(nwell_n_dn_sized_out)
  np3ci_l1 = np3_nplus.not(dnwell).separation(np_3ci_pcomp, 0.16.um, euclidian)
  np3ci_l1.output('NP.3ci', 'NP.3ci : Space to PCOMP: For Outside DNWELL:
                   (i) For PCOMP space to Nwell < 0.43um. : 0.16µm')
  np3ci_l1.forget
  np_3ci_pcomp.forget

  # Rule NP.3cii: Space to PCOMP: For Outside DNWELL:
  ## (ii) For PCOMP space to Nwell >= 0.43um. is 0.08µm
  logger.info('Executing rule NP.3cii')
  np_3cii_pcomp = pcomp.not(dnwell).not(nwell_n_dn_sized_out)
  np3cii_l1 = np3_nplus.not(dnwell).separation(np_3cii_pcomp, 0.08.um, euclidian)
  np3cii_l1.output('NP.3cii', 'NP.3cii : Space to PCOMP: For Outside DNWELL:
                    (ii) For PCOMP space to Nwell >= 0.43um. : 0.08µm')
  np3cii_l1.forget
  np_3cii_pcomp.forget

  # Rule NP.3d: Min/max space to a butted PCOMP is 0um.
  logger.info('Executing rule NP.3d')
  np3d_l1 = ncomp.and(pcomp)
  np3d_l1.output('NP.3d', 'NP.3d : Min/max space to a butted PCOMP: 0um')
  np3d_l1.forget

  # Rule NP.3e: Space to related PCOMP edge adjacent to a butting edge is 0um.
  logger.info('Executing rule NP.3e')
  np3e_l1 = nplus.and(pcomp)
  np3e_l1.output('NP.3e', 'NP.3e : Space to related PCOMP edge adjacent to a butting edge: 0um')
  np3e_l1.forget

  # Rule NP.4a: Space to related P-channel gate at a butting edge parallel to gate. is 0.32µm
  logger.info('Executing rule NP.4a')
  np4a_l1 = nplus_edges.and(pcomp_edges).separation(pgate.edges, 0.32.um, projection)
  np4a_l1.output('NP.4a', 'NP.4a : Space to related P-channel gate at a butting edge parallel to gate. : 0.32µm')
  np4a_l1.forget

  # Rule NP.4b: Within 0.32um of channel, space to P-channel gate extension perpendicular
  ## to the direction of Poly2.
  np_4b_poly = poly2.edges.interacting(pgate.edges.not(pcomp_edges)).centers(0, 0.99).and(pgate.sized(0.32.um))
  logger.info('Executing rule NP.4b')
  np4b_l1 = nplus.interacting(nplus_edges.separation(np_4b_poly, 0.22.um, projection).polygons(0.001.um))
  np4b_l1.output('NP.4b', 'NP.4b : Within 0.32um of channel, space to P-channel gate extension perpendicular
                  to the direction of Poly2.')
  np4b_l1.forget
  np_4b_poly.forget

  # Rule NP.5a: Overlap of N-channel gate. is 0.23µm
  logger.info('Executing rule NP.5a')
  np5a_l1 = ngate.enclosed(nplus, 0.23.um, euclidian).polygons(0.001.um)
  np5a_l2 = ngate.not_outside(nplus).not(nplus)
  np5a_l  = np5a_l1.join(np5a_l2)
  np5a_l.output('NP.5a', 'NP.5a : Overlap of N-channel gate. : 0.23µm')
  np5a_l1.forget
  np5a_l2.forget
  np5a_l.forget

  # Rule NP.5b: Extension beyond COMP for the COMP
  ## (1) inside LVPWELL (2) outside Nwell and DNWELL is 0.16µm.
  logger.info('Executing rule PP.5b')
  np5b_nplus_slct = nplus.edges.not(nplus_butted_edges)
  np5b_nplus = np5b_nplus_slct.and(lvpwell).join(np5b_nplus_slct.not(nwell).not(dnwell))
  np5b_l1 = ncomp.edges.enclosed(np5b_nplus, 0.16.um, projection)
  np5b_l1.output('NP.5b', 'NP.5b : Extension beyond COMP for the COMP
                  (1) inside LVPWELL (2) outside Nwell and DNWELL. : 0.16µm')
  np5b_l1.forget
  np5b_nplus.forget
  np5b_nplus_slct.forget

  # Rule NP.5ci: Extension beyond COMP: For Inside DNWELL: (i)For Nplus < 0.43um
  ## from LVPWELL edge for Nwell or DNWELL tap inside DNWELL. is 0.16µm
  logger.info('Executing rule NP.5ci')
  np_5ci_background = nplus.not_inside(lvpwell).inside(dnwell).edges
  np_5ci_foreground = ncomp.not_inside(lvpwell).inside(dnwell).edges.not(pplus.edges).and(lvpwell_dn_sized_out)
  np5ci_l1 = np_5ci_background.enclosing(np_5ci_foreground, 0.16.um, projection)
  np5ci_l1.output('NP.5ci', 'NP.5ci : Extension beyond COMP: For Inside DNWELL: (i)For Nplus < 0.43um
                   from LVPWELL edge for Nwell or DNWELL tap inside DNWELL. : 0.16µm')
  np5ci_l1.forget
  np_5ci_background.forget
  np_5ci_foreground.forget

  # Rule NP.5cii: Extension beyond COMP: For Inside DNWELL: (ii) For Nplus >= 0.43um
  ## from LVPWELL edge for Nwell or DNWELL tap inside DNWELL. is 0.02µm
  logger.info('Executing rule NP.5cii')
  np_5cii_background = nplus.not_inside(lvpwell).inside(dnwell).edges
  np_5cii_foreground = ncomp.not_inside(lvpwell).inside(dnwell).edges.not(pplus.edges).not(lvpwell_dn_sized_out)
  np5cii_l1 = np_5cii_background.enclosing(np_5cii_foreground, 0.02.um, projection)
  np5cii_l1.output('NP.5cii', 'NP.5cii : Extension beyond COMP: For Inside DNWELL: (ii) For Nplus >= 0.43um
                    from LVPWELL edge for Nwell or DNWELL tap inside DNWELL. : 0.02µm')
  np5cii_l1.forget
  np_5cii_background.forget
  np_5cii_foreground.forget
  lvpwell_dn_sized_out.forget

  # Rule NP.5di: Extension beyond COMP: For Outside DNWELL, inside Nwell:
  ## (i) For Nwell overlap of Nplus < 0.43um. is 0.16µm
  logger.info('Executing rule NP.5di')
  np_5di_background = nplus_n_dn.not_outside(nwell).edges
  np_5di_extend     = nwell_n_dn.not(nwell_n_dn_sized_in)
  np_5di_foreground = ncomp.not_outside(nwell).outside(dnwell).edges.not(pplus.edges).and(np_5di_extend)
  np5di_l1 = np_5di_background.enclosing(np_5di_foreground, 0.16.um, projection)
  np5di_l1.output('NP.5di', 'NP.5di : Extension beyond COMP: For Outside DNWELL, inside Nwell:
                  (i) For Nwell overlap of Nplus < 0.43um. : 0.16µm')
  np5di_l1.forget
  np_5di_background.forget
  np_5di_extend.forget
  np_5di_foreground.forget

  # Rule NP.5dii: Extension beyond COMP: For Outside DNWELL, inside Nwell:
  ## (ii) For Nwell overlap of Nplus >= 0.43um. is 0.02µm
  logger.info('Executing rule NP.5dii')
  np_5dii_background = nplus_n_dn.not_outside(nwell).edges.not(pplus.edges)
  np_5dii_foreground = ncomp.not_outside(nwell).outside(dnwell).edges.not(pplus.edges).and(nwell_n_dn_sized_in)
  np5dii_l1 = np_5dii_background.enclosing(np_5dii_foreground, 0.02.um, euclidian)
  np5dii_l1.output('NP.5dii', 'NP.5dii : Extension beyond COMP: For Outside DNWELL, inside Nwell:
                    (ii) For Nwell overlap of Nplus >= 0.43um. : 0.02µm')
  np5dii_l1.forget
  np_5dii_background.forget
  nwell_n_dn_sized_in.forget
  np_5dii_foreground.forget
  nplus_n_dn.forget

  # Rule NP.6: Overlap with NCOMP butted to PCOMP. is 0.22µm
  logger.info('Executing rule NP.6')
  np6_l1 = comp.interacting(nplus).enclosing(pcomp.interacting(nplus), 0.22.um, projection).polygons
  np6_l1.output('NP.6', 'NP.6 : Overlap with NCOMP butted to PCOMP. : 0.22µm')
  np6_l1.forget

  # Rule NP.7: Space to unrelated unsalicided Poly2. is 0.18µm
  logger.info('Executing rule NP.7')
  np7_l1 = nplus.separation(poly2.and(sab), 0.18.um, euclidian)
  np7_l1.output('NP.7', 'NP.7 : Space to unrelated unsalicided Poly2. : 0.18µm')
  np7_l1.forget

  # Rule NP.8a: Minimum Nplus area (um2). is 0.35µm²
  logger.info('Executing rule NP.8a')
  np8a_l1 = nplus.with_area(nil, 0.35.um)
  np8a_l1.output('NP.8a', 'NP.8a : Minimum Nplus area (um2). : 0.35µm²')
  np8a_l1.forget

  # Rule NP.8b: Minimum area enclosed by Nplus (um2). is 0.35µm²
  logger.info('Executing rule NP.8b')
  np8b_l1 = nplus.holes.with_area(nil, 0.35.um)
  np8b_l1.output('NP.8b', 'NP.8b : Minimum area enclosed by Nplus (um2). : 0.35µm²')
  np8b_l1.forget

  # Rule NP.9: Overlap of unsalicided Poly2. is 0.18µm
  logger.info('Executing rule NP.9')
  np9_l1 = nplus.enclosing(poly2.and(sab), 0.18.um, euclidian).polygons(0.001.um)
  np9_l2 = poly2.and(sab).not_outside(nplus).not(nplus)
  np9_l  = np9_l1.join(np9_l2)
  np9_l.output('NP.9', 'NP.9 : Overlap of unsalicided Poly2. : 0.18µm')
  np9_l1.forget
  np9_l2.forget
  np9_l.forget

  # Rule NP.10: Overlap of unsalicided COMP. is 0.18µm
  logger.info('Executing rule NP.10')
  np10_l1 = nplus.enclosing(comp.and(sab), 0.18.um, euclidian)
  np10_l1.output('NP.10', 'NP.10 : Overlap of unsalicided COMP. : 0.18µm')
  np10_l1.forget

  # Rule NP.11: Butting Nplus and PCOMP is forbidden within 0.43um of Nwell edge (for outside DNWELL)
  ## and of LVPWELL edge (for inside DNWELL case).
  logger.info('Executing rule NP.11')
  np_11_nwell_exclusion_area = nwell_n_dn_sized_out.not(nwell_n_dn)
  np_11_lvpwell_exclude_area = lvpwell_dn.not(lvpwell_dn_sized_in)
  np11_l1 = nplus_butted_edges.and(np_11_nwell_exclusion_area)
  np11_l2 = nplus_butted_edges.and(np_11_lvpwell_exclude_area)
  np11_l = np11_l1.join(np11_l2)
  np11_l.output('NP.11',
                'NP.11 : Butting Nplus and PCOMP is forbidden within 0.43um of Nwell edge (for outside DNWELL)
                  and of LVPWELL edge (for inside DNWELL case).')
  np11_l.forget
  np11_l1.forget
  np11_l2.forget
  np_11_nwell_exclusion_area.forget
  np_11_lvpwell_exclude_area.forget
  nplus_butted_edges.forget
  nwell_n_dn_sized_out.forget
  lvpwell_dn_sized_in.forget

  # Rule NP.12: Overlap with P-channel poly2 gate extension is forbidden
  ## within 0.32um of P-channel gate.
  logger.info('Executing rule NP.12')
  np12_l1 = nplus.interacting(nplus_edges.separation(pgate.edges.and(pcomp_edges), 0.32.um,
                                                     euclidian).polygons(0.001.um))
  np12_l1.output('NP.12', 'NP.12 : Overlap with P-channel poly2 gate extension is forbidden
                  within 0.32um of P-channel gate.')
  np12_l1.forget
  nplus_edges.forget
  pcomp_edges.forget
end
# frozen_string_literal: true

################################################################################################
# Copyright 2022 GlobalFoundries PDK Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################################

exec_end_time = Time.now
run_time = exec_end_time - exec_start_time
logger.info("#{$table_name} DRC Total Run time #{run_time} seconds")
