# frozen_string_literal: true

################################################################################################
# Copyright 2023 GlobalFoundries PDK Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################################

#=======================================================================================================================
#--------------------------------------------- GF 0.18um MCU DRC RULE DECK ---------------------------------------------
#=======================================================================================================================
require 'time'
require 'logger'
require 'etc'

exec_start_time = Time.now

logger = Logger.new($stdout)

logger.formatter = proc do |_severity, datetime, _progname, msg|
  "#{datetime}: Memory Usage (" + `pmap #{Process.pid} | tail -1`[10, 40].strip + ") : #{msg}
"
end

#================================================
#----------------- FILE SETUP -------------------
#================================================
logger.info("Starting running GF180MCU Klayout DRC runset on #{$input}")
logger.info("Ruby Version for klayout: #{RUBY_VERSION}")

if $input
  if $topcell
    source($input, $topcell)
  else
    source($input)
  end
end

logger.info('Loading database to memory is complete.')

if $report
  logger.info("GF180MCU Klayout DRC runset output at: #{$report}")
  report('DRC Run Report at', $report)
else
  layout_dir = Pathname.new(RBA::CellView.active.filename).parent.realpath
  report_path = layout_dir.join('gf180_drc.lyrdb').to_s
  logger.info("GF180MCU Klayout DRC runset output at default location: #{report_path}")
  report('DRC Run Report at', report_path)
end

#================================================
#------------------ SWITCHES --------------------
#================================================
logger.info('Evaluate switches.')

def bool_check?(obj)
  obj.to_s.downcase == 'true'
end

TABLE_NAME = $table_name || 'main'

logger.info("table_name selected  #{TABLE_NAME}")

# connectivity rules
CONNECTIVITY_EN = bool_check?($conn_drc)

conn_tables = %w[dnwell dnwell_split nwell nwell_split lvpwell
                 lvpwell_split nat nat_split ldnmos ldnmos_split ldpmos ldpmos_split main]

CONNECTIVITY_RULES = if conn_tables.include?(TABLE_NAME) && CONNECTIVITY_EN
                       true
                     else
                       false
                     end

logger.info("CONNECTIVITY_RULES enabled: #{CONNECTIVITY_RULES}")

# split deep rules
SPLIT_DEEP = bool_check?($split_deep)

# WEDGE
WEDGE = bool_check?($wedge)

logger.info("Wedge enabled: #{WEDGE}")

# BALL
BALL = bool_check?($ball)

logger.info("Ball enabled: #{BALL}")

# GOLD
GOLD = bool_check?($gold)

logger.info("Gold enabled: #{GOLD}")

# MIM
MIM_OPTION = $mim_option || 'B'

logger.info("MIM Option selected: #{MIM_OPTION}")

# OFFGRID
OFFGRID = $offgrid != 'false'

logger.info("Offgrid enabled:  #{OFFGRID}")

# threads
if $thr
  threads($thr)
else
  thr ||= Etc.nprocessors
  threads(thr)
end

logger.info("Number of threads to use #{$thr}")

#=== PRINT DETAILS ===

verbose(bool_check?($verbose))

logger.info("Verbose mode: #{$verbose}")

# === TILING MODE ===
case $run_mode
## Tiling mode is for testing purpose only [Not used in run_drc.py]
when 'tiling'
  tiles(500.um)
  tile_borders(50.um)
  logger.info('Tiling  mode is enabled.')

when 'deep'
  #=== HIER MODE ===
  deep
  logger.info("deep  mode is enabled for #{TABLE_NAME} table")
else
  #=== FLAT MODE ===
  flat
  logger.info("flat  mode is enabled for #{TABLE_NAME} table")
end

# METAL_TOP
METAL_TOP = $metal_top || '9K'

logger.info("METAL_TOP Selected is #{METAL_TOP}")

# METAL_LEVEL
METAL_LEVEL = $metal_level || '5LM'

logger.info("METAL_STACK Selected is #{METAL_LEVEL}")

# FEOL
FEOL = bool_check?($feol)

logger.info("FEOL enabled: #{FEOL}")

# BEOL
BEOL = bool_check?($beol)

logger.info("BEOL enabled: #{BEOL}")

## SLOW_VIA
SLOW_VIA = bool_check?($slow_via)

logger.info("SLOW_VIA enabled: #{SLOW_VIA}")

#================================================
#------------- LAYERS DEFINITIONS ---------------
#================================================

# %include layers_def.drc

#=====================================================
#------------- BASE LAYERS DERIVATIONS ---------------
#=====================================================

dnwell_n        = dnwell.not(lvpwell)
dnwell_p        = dnwell.and(lvpwell)

all_nwell       = dnwell_n.join(nwell)

ncomp           = comp.and(nplus)
pcomp           = comp.and(pplus)
tgate           = poly2.and(comp).not(res_mk)

nactive         = ncomp.not(all_nwell)
ngate           = nactive.and(tgate)
nsd             = nactive.interacting(ngate).not(ngate).not(res_mk)
ptap            = pcomp.not(all_nwell).not(res_mk)

pactive         = pcomp.and(all_nwell)
pgate           = pactive.and(tgate)
psd             = pactive.interacting(pgate).not(pgate).not(res_mk)
ntap            = ncomp.and(all_nwell).not(res_mk)

ngate_dn        = ngate.and(dnwell_p)
ptap_dn         = ptap.and(dnwell_p).outside(well_diode_mk)

pgate_dn        = pgate.and(dnwell_n)
ntap_dn         = ntap.and(dnwell_n)

psd_dn          = pcomp.and(dnwell_n).interacting(pgate_dn).not(pgate_dn).not(res_mk)
nsd_dn          = ncomp.and(dnwell_p).interacting(ngate_dn).not(ngate_dn).not(res_mk)

natcomp        	= nat.and(comp)

# Gate
nom_gate = tgate.not(dualgate)
thick_gate = tgate.and(dualgate)

ngate_56v = ngate.and(dualgate)
pgate_56v = pgate.and(dualgate)

ngate_5v = ngate_56v.and(v5_xtor)
pgate_5v = pgate_56v.and(v5_xtor)

ngate_6v = ngate_56v.not(v5_xtor)
pgate_6v = pgate_56v.not(v5_xtor)

# DNWELL
dnwell_3p3v = dnwell.not_interacting(v5_xtor).not_interacting(dualgate)
dnwell_56v = dnwell.overlapping(dualgate)

# LVPWELL
lvpwell_dn = lvpwell.interacting(dnwell)
lvpwell_out = lvpwell.not_interacting(dnwell)

lvpwell_dn3p3v = lvpwell.and(dnwell_3p3v)
lvpwell_dn56v = lvpwell.and(dnwell_56v)

# NWELL
nwell_dn = nwell.interacting(dnwell)
nwell_n_dn = nwell.not_interacting(dnwell)

#================================================
#------------- LAYERS CONNECTIONS ---------------
#================================================

if CONNECTIVITY_RULES
  logger.info('Construct connectivity for the design.')

  connect(dnwell, ncomp)
  connect(lvpwell_out, pcomp)
  connect(lvpwell_dn, pcomp)
  connect(nwell, ncomp)
  connect(mvsd, ncomp)
  connect(mvpsd, pcomp)

  if contact_tables.include?(TABLE_NAME)
    connect(ncomp,  contact)
    connect(pcomp,  contact)
    connect(natcomp, contact)
    connect(contact, metal1)
  end

  if via1_tables.include?(TABLE_NAME)
    connect(metal1,  via1)
    connect(via1,    metal2)
  end

  case METAL_LEVEL
  when '3LM', '4LM', '5LM', '6LM'
    if via2_tables.include?(TABLE_NAME)
      connect(metal2,  via2)
      connect(via2,    metal3)
    end
  end
  case METAL_LEVEL
  when '4LM', '5LM', '6LM'
    connect(metal3,  via3)
    connect(via3,    metal4)
  end
  case METAL_LEVEL
  when '5LM', '6LM'
    connect(metal4,  via4)
    connect(via4,    metal5)
  end
  case METAL_LEVEL
  when '6LM'
    connect(metal5,  via5)
    connect(via5,    metaltop)
  end
end

#================================================
#------------ PRE-DEFINED FUNCTIONS -------------
#================================================

def unconn_errors_check(net1, net2, unconnected_errors)
  if !net1 || !net2
    logger.error("Connectivity check encountered 2 nets that doesn't exist. Potential issue in klayout...")
  elsif net1.circuit != net2.circuit || net1.cluster_id != net2.cluster_id
    # unconnected
    unconnected_errors.data.insert(ep)
  end
  unconnected_errors
end

def get_nets(_data, layer1, layer2, edge_pairs)
  net1 = l2n_data.probe_net(layer1.data, edge_pairs.first.p1)
  net2 = l2n_data.probe_net(layer2.data, edge_pairs.second.p1)
  [net1, net2]
end

def conn_space_viol(layer, conn_val, mode)
  connected_output = layer.space(conn_val.um, mode).polygons(0.001.um)
  singularity_errors = layer.space(0.001.um, mode).polygons(0.001.um)
  [connected_output, singularity_errors]
end

def conn_space_check(layer, not_conn_val, mode)
  unconnected_errors_unfiltered = layer.space(not_conn_val.um, mode)
  connected_output, singularity_errors = conn_space_viol(layer, conn_val, mode)
  # Filter out the errors arising from the same net
  unconnected_errors = DRC::DRCLayer.new(self, RBA::EdgePairs.new)
  unconnected_errors_unfiltered.data.each do |ep|
    net1, net2 = get_nets(l2n_data, layer, layer, ep)
    unconnected_errors = unconn_errors_check(net1, net2, unconnected_errors)
  end
  unconnected_output = unconnected_errors.polygons.join(singularity_errors)
  [connected_output, unconnected_output]
end

def conn_space_nets(layer, conn_val, not_conn_val, mode)
  nets = layer.nets
  connected_output = nets.space(conn_val.um, mode, props_eq).polygons(0.001.um)
  singularity_errors = nets.space(0.001.um, mode).polygons(0.001.um)
  unconnected_output = nets.space(not_conn_val.um, mode, props_ne).polygons(0.001.um).join(singularity_errors)
  [connected_output, unconnected_output]
end

def conn_space(layer, conn_val, not_conn_val, mode)
  if layer.respond_to?(:nets) # KLayout version (>=0.28.4) which supports "nets"
    connected_output, unconnected_output = conn_space_nets(layer, conn_val, not_conn_val, mode)
  else
    raise 'ERROR : Wrong connectivity implementation' if conn_val > not_conn_val

    connected_output, unconnected_output = conn_space_check(layer, not_conn_val, mode)
  end
  [connected_output, unconnected_output]
end

def sep_viol_nets(layer1, layer2, conn_val, not_conn_val, mode)
  connected_output   = layer1.nets.separation(layer2.nets, conn_val.um,     mode, props_eq).polygons(0.001.um)
  unconnected_output = layer1.nets.separation(layer2.nets, not_conn_val.um, mode, props_ne).polygons(0.001.um)
  [connected_output, unconnected_output]
end

def unconn_separation_check(layer1, layer2, not_conn_val, mode)
  unconnected_errors_unfiltered = layer1.separation(layer2, not_conn_val.um, mode)
  # Filter out the errors arising from the same net
  unconnected_errors = DRC::DRCLayer.new(self, RBA::EdgePairs.new)
  unconnected_errors_unfiltered.data.each do |ep|
    net1, net2 = get_nets(l2n_data, layer1, layer2, ep)
    unconnected_errors = unconn_errors(net1, net2, unconnected_errors)
  end
  unconnected_errors
end

def conn_separation(layer1, layer2, conn_val, not_conn_val, mode)
  if layer1.respond_to?(:nets) # KLayout version (>=0.28.4) which supports "nets"
    connected_output, unconnected_output = sep_viol_nets(layer1, layer2, conn_val, not_conn_val, mode)
  else
    raise 'ERROR : Wrong connectivity implementation' if conn_val > not_conn_val

    connected_output = layer1.separation(layer2, conn_val.um, mode).polygons(0.001.um)
    unconnected_errors = unconn_separation_check(layer1, layer2, not_conn_val, mode)
    unconnected_output = unconnected_errors.polygons(0.001.um)
  end
  [connected_output, unconnected_output]
end

def size_overunder_in_layers(large_layer, size_layer, size_value)
  out_layer = DRC::DRCLayer.new(self, RBA::Region.new)
  large_layer.data.each do |ep|
    curr_large_layer = DRC::DRCLayer.new(self, RBA::Region.new(ep))
    curr_large_layer = curr_large_layer.and(size_layer)
    curr_large_layer = curr_large_layer.sized(size_value, 'square_limit').merged.sized(-size_value, 'square_limit')
    out_layer.data.insert(curr_large_layer.data)
  end
  out_layer
end

# === IMPLICIT EXTRACTION ===
if CONNECTIVITY_RULES
  logger.info('Connectivity rules enabled, Netlist object will be generated.')
  netlist
end

# === LAYOUT EXTENT ===
CHIP = extent.sized(0.0)
logger.info("Total area of the design is #{CHIP.area} um^2.")

#================================================
#----------------- MAIN RUNSET ------------------
#================================================

logger.info('Starting GF180MCU DRC rules.')
logger.info('Running all FEOL rules') if FEOL

logger.info('Running all BEOL rules') if BEOL
# frozen_string_literal: true

################################################################################################
# Copyright 2022 GlobalFoundries PDK Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################################

#================================================
#---------------------EFUSE----------------------
#================================================

logger.info('Starting EFUSE derivations')

efuse_mk_pplus = efuse_mk.and(pplus)
plfuse_efuse = plfuse.and(efuse_mk)
poly_efuse = poly2.and(efuse_mk)
cathode = poly_efuse.not(lvs_source.join(plfuse))
anode = poly_efuse.and(lvs_source)
cathode_edges = cathode.edges
anode_edges = anode.edges
plfuse_edges = plfuse.edges

# Rule EF.01: Min. (Poly2 butt PLFUSE) within EFUSE_MK and Pplus is 0um.
logger.info('Executing rule EF.01')
ef01_l1 = poly2.join(plfuse).interacting(efuse_mk).not_inside(efuse_mk_pplus)
ef01_l1.output('EF.01', 'EF.01 : Min. (Poly2 butt PLFUSE) within EFUSE_MK and Pplus: 0um')
ef01_l1.forget

# Rule EF.02: Min./Max. PLFUSE width. is 0.18µm
logger.info('Executing rule EF.02')
ef02_l1 = plfuse.drc(width != 0.18.um)
ef02_l1.output('EF.02', 'EF.02 : Min./Max. PLFUSE width: 0.18µm')
ef02_l1.forget

# Rule EF.03: Min. Max. PLFUSE length. is 1.26µm
logger.info('Executing rule EF.03')
ef03_l1 = poly2.edges.and(plfuse_edges).centers(0, 0.95)
ef03_l = plfuse_edges.interacting(ef03_l1).without_length(1.26.um)
ef03_l.output('EF.03', 'EF.03 : Min. Max. PLFUSE length: 1.26µm')
ef03_l.forget
ef03_l1.forget

# Rule EF.04a: Min. Max. PLFUSE overlap Poly2
## (coinciding permitted) and touch cathode and anode.
logger.info('Executing rule EF.04a')
ef04a_exclude = plfuse.interacting(poly2.not(plfuse), 2, 2)
ef04a_l1 = plfuse.not_in(ef04a_exclude).inside(efuse_mk)
ef04a_l2 = plfuse.not(poly2).inside(efuse_mk)
ef04a_l = ef04a_l1.join(ef04a_l2)
ef04a_l.output('EF.04a', 'EF.04a : Min. Max. PLFUSE overlap Poly2
                (coinciding permitted) and touch cathode and anode.')
ef04a_l1.forget
ef04a_l.forget
ef04a_l1.forget
ef04a_l2.forget

# Rule EF.04b: PLFUSE must be rectangular.
logger.info('Executing rule EF.04b')
ef04b_l1 = plfuse.non_rectangles
ef04b_l1.output('EF.04b', 'EF.04b : PLFUSE must be rectangular.')
ef04b_l1.forget

# Rule EF.04c: Cathode Poly2 must be rectangular.
logger.info('Executing rule EF.04c')
ef04c_l1 = cathode.non_rectangles
ef04c_l1.output('EF.04c', 'EF.04c : Cathode Poly2 must be rectangular.')
ef04c_l1.forget

# Rule EF.04d: Anode Poly2 must be rectangular.
logger.info('Executing rule EF.04d')
ef04d_l1 = anode.non_rectangles
ef04d_l1.output('EF.04d', 'EF.04d : Anode Poly2 must be rectangular.')
ef04d_l1.forget

# Rule EF.05: Min./Max. LVS_Source overlap Poly2 (at Anode) is 0um.
logger.info('Executing rule EF.05')
ef05_l1 = poly_efuse.not(plfuse).interacting(lvs_source).not(lvs_source)
ef05_l2 = lvs_source.not(poly2).and(efuse_mk)
ef05_l = ef05_l1.join(ef05_l2)
ef05_l.output('EF.05', 'EF.05 : Min./Max. LVS_Source overlap Poly2 (at Anode): 0um')
ef05_l.forget
ef05_l1.forget
ef05_l2.forget
poly_efuse.forget

# Rule EF.06: Min./Max. Cathode Poly2 width. is 2.26µm
logger.info('Executing rule EF.06')
cathode_width = cathode_edges.not_interacting(cathode_edges.interacting(plfuse)).join(cathode_edges.interacting(plfuse))
ef06_l1 = cathode_width.without_length(2.26.um)
ef06_l1.output('EF.06', 'EF.06 : Min./Max. Cathode Poly2 width: 2.26µm')
ef06_l1.forget

# Rule EF.07: Min./Max. Cathode Poly2 length is 1.84µm.
logger.info('Executing rule EF.07')
ef07_l1 = cathode_edges.not(cathode_width).without_length(1.84.um)
ef07_l1.output('EF.07', 'EF.07 : Min./Max. Cathode Poly2 length: 1.84µm')
ef07_l1.forget

# Rule EF.08: Min./Max. Anode Poly2 width is 1.06µm.
logger.info('Executing rule EF.08')
anode_width = anode_edges.not_interacting(anode_edges.interacting(plfuse)).join(anode_edges.interacting(plfuse))
ef08_l1 = anode_width.without_length(1.06.um)
ef08_l1.output('EF.08', 'EF.08 : Min./Max. Anode Poly2 width: 1.06µm')
ef08_l1.forget

# Rule EF.09: Min./Max. Anode Poly2 length is 2.43µm.
logger.info('Executing rule EF.09')
ef09_l1 = anode_edges.not(anode_width).without_length(2.43.um)
ef09_l1.output('EF.09', 'EF.09 : Min./Max. Anode Poly2 length: 2.43µm')
ef09_l1.forget
anode_width.forget

# Rule EF.10: Min. Cathode Poly2 to Poly2 space. is 0.26µm
logger.info('Executing rule EF.10')
ef10_l1 = cathode.space(0.26.um, euclidian)
ef10_l1.output('EF.10', 'EF.10 : Min. Cathode Poly2 to Poly2 space: 0.26µm')
ef10_l1.forget

# Rule EF.11: Min. Anode Poly2 to Poly2 space. is 0.26µm
logger.info('Executing rule EF.11')
ef11_l1 = anode.space(0.26.um, euclidian)
ef11_l1.output('EF.11', 'EF.11 : Min. Anode Poly2 to Poly2 space: 0.26µm')
ef11_l1.forget

# Rule EF.12: Min. Space of Cathode Contact to PLFUSE end.
logger.info('Executing rule EF.12')
cont_ef = contact.and(plfuse_efuse)
ef12_l1 = plfuse_efuse.separation(contact.and(cathode), 0.155.um).polygons(0.001.um).join(cont_ef)
ef12_l1.output('EF.12', 'EF.12 : Min. Space of Cathode Contact to PLFUSE end.')
ef12_l1.forget

# Rule EF.13: Min. Space of Anode Contact to PLFUSE end.
logger.info('Executing rule EF.13')
ef13_l1 = plfuse_efuse.separation(contact.and(anode), 0.14.um).polygons(0.001.um).join(cont_ef)
ef13_l1.output('EF.13', 'EF.13 : Min. Space of Anode Contact to PLFUSE end.')
ef13_l1.forget
cont_ef.forget

# Rule EF.14: Min. EFUSE_MK enclose LVS_Source.
logger.info('Executing rule EF.14')
ef14_l1 = lvs_source.not_outside(efuse_mk).not(efuse_mk)
ef14_l1.output('EF.14', 'EF.14 : Min. EFUSE_MK enclose LVS_Source.')
ef14_l1.forget

# Rule EF.15: NO Contact is allowed to touch PLFUSE.
logger.info('Executing rule EF.15')
ef15_l1 = plfuse.interacting(contact)
ef15_l1.output('EF.15', 'EF.15 : NO Contact is allowed to touch PLFUSE.')
ef15_l1.forget

# Rule EF.16a: Cathode must contain exact number of Contacts at each ends. is 4µm
logger.info('Executing rule EF.16a')
ef16a_l1 = cathode.not_covering(contact, 4, 4)
ef16a_l1.output('EF.16a', 'EF.16a : Cathode must contain exact number of Contacts at each ends: 4µm')
ef16a_l1.forget

# Rule EF.16b: Anode must contain exact number of Contacts at each ends. is 4µm
logger.info('Executing rule EF.16b')
ef16b_l1 = anode.not_covering(contact, 4, 4)
ef16b_l1.output('EF.16b', 'EF.16b : Anode must contain exact number of Contacts at each ends: 4µm')
ef16b_l1.forget

# Rule EF.17: Min. Space of EFUSE_MK to EFUSE_MK. is 0.26µm
logger.info('Executing rule EF.17')
ef17_l1 = efuse_mk.space(0.26.um, euclidian)
ef17_l1.output('EF.17', 'EF.17 : Min. Space of EFUSE_MK to EFUSE_MK: 0.26µm')
ef17_l1.forget

# Rule EF.18: PLFUSE must sit on field oxide (NOT COMP), no cross with any
## COMP, Nplus, Pplus, ESD, SAB, Resistor, Metal1, Metal2.
logger.info('Executing rule EF.18')
ef18_exclude = comp.join(nplus).join(esd).join(sab).join(resistor).join(metal1).join(metal2)
ef18_l1 = plfuse.not(plfuse.outside(ef18_exclude))
ef18_l1.output('EF.18', 'EF.18 : PLFUSE must sit on field oxide (NOT COMP), no cross with any
                COMP, Nplus, Pplus, ESD, SAB, Resistor, Metal1, Metal2.')
ef18_l1.forget

# Rule EF.19: Min. PLFUSE space to Metal1, Metal2.
logger.info('Executing rule EF.19')
ef19_l1 = plfuse.not(plfuse.outside(metal1).outside(metal2))
ef19_l1.output('EF.19', 'EF.19 : Min. PLFUSE space to Metal1, Metal2.')
ef19_l1.forget

# Rule EF.20: Min. PLFUSE space to COMP, Nplus, Pplus, Resistor, ESD, SAB. is 2.73µm
logger.info('Executing rule EF.20')
ef20_l1 = plfuse.separation(comp + nplus + esd + sab + resistor, 2.73.um, euclidian)
ef20_l1.output('EF.20', 'EF.20 : Min. PLFUSE space to COMP, Nplus, Pplus, Resistor, ESD, SAB: 2.73µm')
ef20_l1.forget

# Rule EF.21: Min./Max. eFUSE Poly2 length. is 5.53µm
logger.info('Executing rule EF.21')
ef_21_fuse    = poly2.interacting(plfuse).inside(efuse_mk_pplus).extents.edges
ef_21_anode   = anode_edges.not_interacting(anode_edges.interacting(plfuse))
ef_21_cathode = cathode_edges.not_interacting(cathode_edges.interacting(plfuse))
ef21_l1 = ef_21_fuse.not_interacting(ef_21_anode.join(ef_21_cathode).centers(0, 0.95)).without_length(5.53.um)
ef21_l1.output('EF.21', 'EF.21 : Min./Max. eFUSE Poly2 length: 5.53µm')
ef21_l1.forget
ef_21_fuse.forget
ef_21_anode.forget
ef_21_cathode.forget
efuse_mk_pplus.forget

# Rule EF.22a: Min./Max. Cathode Poly2 overlap with PLFUSE in width direction. is 1.04µm
logger.info('Executing rule EF.22a')
ef22a_l1 = cathode_edges.interacting(plfuse).not(plfuse_edges).without_length(1.04.um)
ef22a_l1.output('EF.22a', 'EF.22a : Min./Max. Cathode Poly2 overlap with PLFUSE in width direction: 1.04µm')
ef22a_l1.forget
cathode_edges.forget

# Rule EF.22b: Min./Max. Anode Poly2 overlap with PLFUSE in width direction. is 0.44µm
logger.info('Executing rule EF.22b')
ef22b_l1 = anode_edges.interacting(plfuse).not(plfuse_edges).without_length(0.44.um)
ef22b_l1.output('EF.22b', 'EF.22b : Min./Max. Anode Poly2 overlap with PLFUSE in width direction: 0.44µm')
ef22b_l1.forget
plfuse_efuse.forget
plfuse_edges.forget
anode_edges.forget
# frozen_string_literal: true

################################################################################################
# Copyright 2022 GlobalFoundries PDK Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################################

exec_end_time = Time.now
run_time = exec_end_time - exec_start_time
logger.info("#{$table_name} DRC Total Run time #{run_time} seconds")
