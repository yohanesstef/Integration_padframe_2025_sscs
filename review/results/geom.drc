# frozen_string_literal: true

################################################################################################
# Copyright 2023 GlobalFoundries PDK Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################################

#=======================================================================================================================
#--------------------------------------------- GF 0.18um MCU DRC RULE DECK ---------------------------------------------
#=======================================================================================================================
require 'time'
require 'logger'
require 'etc'

exec_start_time = Time.now

logger = Logger.new($stdout)

logger.formatter = proc do |_severity, datetime, _progname, msg|
  "#{datetime}: Memory Usage (" + `pmap #{Process.pid} | tail -1`[10, 40].strip + ") : #{msg}
"
end

#================================================
#----------------- FILE SETUP -------------------
#================================================
logger.info("Starting running GF180MCU Klayout DRC runset on #{$input}")
logger.info("Ruby Version for klayout: #{RUBY_VERSION}")

if $input
  if $topcell
    source($input, $topcell)
  else
    source($input)
  end
end

logger.info('Loading database to memory is complete.')

if $report
  logger.info("GF180MCU Klayout DRC runset output at: #{$report}")
  report('DRC Run Report at', $report)
else
  layout_dir = Pathname.new(RBA::CellView.active.filename).parent.realpath
  report_path = layout_dir.join('gf180_drc.lyrdb').to_s
  logger.info("GF180MCU Klayout DRC runset output at default location: #{report_path}")
  report('DRC Run Report at', report_path)
end

#================================================
#------------------ SWITCHES --------------------
#================================================
logger.info('Evaluate switches.')

def bool_check?(obj)
  obj.to_s.downcase == 'true'
end

TABLE_NAME = $table_name || 'main'

logger.info("table_name selected  #{TABLE_NAME}")

# connectivity rules
CONNECTIVITY_EN = bool_check?($conn_drc)

conn_tables = %w[dnwell dnwell_split nwell nwell_split lvpwell
                 lvpwell_split nat nat_split ldnmos ldnmos_split ldpmos ldpmos_split main]

CONNECTIVITY_RULES = if conn_tables.include?(TABLE_NAME) && CONNECTIVITY_EN
                       true
                     else
                       false
                     end

logger.info("CONNECTIVITY_RULES enabled: #{CONNECTIVITY_RULES}")

# split deep rules
SPLIT_DEEP = bool_check?($split_deep)

# WEDGE
WEDGE = bool_check?($wedge)

logger.info("Wedge enabled: #{WEDGE}")

# BALL
BALL = bool_check?($ball)

logger.info("Ball enabled: #{BALL}")

# GOLD
GOLD = bool_check?($gold)

logger.info("Gold enabled: #{GOLD}")

# MIM
MIM_OPTION = $mim_option || 'B'

logger.info("MIM Option selected: #{MIM_OPTION}")

# OFFGRID
OFFGRID = $offgrid != 'false'

logger.info("Offgrid enabled:  #{OFFGRID}")

# threads
if $thr
  threads($thr)
else
  thr ||= Etc.nprocessors
  threads(thr)
end

logger.info("Number of threads to use #{$thr}")

#=== PRINT DETAILS ===

verbose(bool_check?($verbose))

logger.info("Verbose mode: #{$verbose}")

# === TILING MODE ===
case $run_mode
## Tiling mode is for testing purpose only [Not used in run_drc.py]
when 'tiling'
  tiles(500.um)
  tile_borders(50.um)
  logger.info('Tiling  mode is enabled.')

when 'deep'
  #=== HIER MODE ===
  deep
  logger.info("deep  mode is enabled for #{TABLE_NAME} table")
else
  #=== FLAT MODE ===
  flat
  logger.info("flat  mode is enabled for #{TABLE_NAME} table")
end

# METAL_TOP
METAL_TOP = $metal_top || '9K'

logger.info("METAL_TOP Selected is #{METAL_TOP}")

# METAL_LEVEL
METAL_LEVEL = $metal_level || '5LM'

logger.info("METAL_STACK Selected is #{METAL_LEVEL}")

# FEOL
FEOL = bool_check?($feol)

logger.info("FEOL enabled: #{FEOL}")

# BEOL
BEOL = bool_check?($beol)

logger.info("BEOL enabled: #{BEOL}")

## SLOW_VIA
SLOW_VIA = bool_check?($slow_via)

logger.info("SLOW_VIA enabled: #{SLOW_VIA}")

#================================================
#------------- LAYERS DEFINITIONS ---------------
#================================================

# %include layers_def.drc

#=====================================================
#------------- BASE LAYERS DERIVATIONS ---------------
#=====================================================

dnwell_n        = dnwell.not(lvpwell)
dnwell_p        = dnwell.and(lvpwell)

all_nwell       = dnwell_n.join(nwell)

ncomp           = comp.and(nplus)
pcomp           = comp.and(pplus)
tgate           = poly2.and(comp).not(res_mk)

nactive         = ncomp.not(all_nwell)
ngate           = nactive.and(tgate)
nsd             = nactive.interacting(ngate).not(ngate).not(res_mk)
ptap            = pcomp.not(all_nwell).not(res_mk)

pactive         = pcomp.and(all_nwell)
pgate           = pactive.and(tgate)
psd             = pactive.interacting(pgate).not(pgate).not(res_mk)
ntap            = ncomp.and(all_nwell).not(res_mk)

ngate_dn        = ngate.and(dnwell_p)
ptap_dn         = ptap.and(dnwell_p).outside(well_diode_mk)

pgate_dn        = pgate.and(dnwell_n)
ntap_dn         = ntap.and(dnwell_n)

psd_dn          = pcomp.and(dnwell_n).interacting(pgate_dn).not(pgate_dn).not(res_mk)
nsd_dn          = ncomp.and(dnwell_p).interacting(ngate_dn).not(ngate_dn).not(res_mk)

natcomp        	= nat.and(comp)

# Gate
nom_gate = tgate.not(dualgate)
thick_gate = tgate.and(dualgate)

ngate_56v = ngate.and(dualgate)
pgate_56v = pgate.and(dualgate)

ngate_5v = ngate_56v.and(v5_xtor)
pgate_5v = pgate_56v.and(v5_xtor)

ngate_6v = ngate_56v.not(v5_xtor)
pgate_6v = pgate_56v.not(v5_xtor)

# DNWELL
dnwell_3p3v = dnwell.not_interacting(v5_xtor).not_interacting(dualgate)
dnwell_56v = dnwell.overlapping(dualgate)

# LVPWELL
lvpwell_dn = lvpwell.interacting(dnwell)
lvpwell_out = lvpwell.not_interacting(dnwell)

lvpwell_dn3p3v = lvpwell.and(dnwell_3p3v)
lvpwell_dn56v = lvpwell.and(dnwell_56v)

# NWELL
nwell_dn = nwell.interacting(dnwell)
nwell_n_dn = nwell.not_interacting(dnwell)

#================================================
#------------- LAYERS CONNECTIONS ---------------
#================================================

if CONNECTIVITY_RULES
  logger.info('Construct connectivity for the design.')

  connect(dnwell, ncomp)
  connect(lvpwell_out, pcomp)
  connect(lvpwell_dn, pcomp)
  connect(nwell, ncomp)
  connect(mvsd, ncomp)
  connect(mvpsd, pcomp)

  if contact_tables.include?(TABLE_NAME)
    connect(ncomp,  contact)
    connect(pcomp,  contact)
    connect(natcomp, contact)
    connect(contact, metal1)
  end

  if via1_tables.include?(TABLE_NAME)
    connect(metal1,  via1)
    connect(via1,    metal2)
  end

  case METAL_LEVEL
  when '3LM', '4LM', '5LM', '6LM'
    if via2_tables.include?(TABLE_NAME)
      connect(metal2,  via2)
      connect(via2,    metal3)
    end
  end
  case METAL_LEVEL
  when '4LM', '5LM', '6LM'
    connect(metal3,  via3)
    connect(via3,    metal4)
  end
  case METAL_LEVEL
  when '5LM', '6LM'
    connect(metal4,  via4)
    connect(via4,    metal5)
  end
  case METAL_LEVEL
  when '6LM'
    connect(metal5,  via5)
    connect(via5,    metaltop)
  end
end

#================================================
#------------ PRE-DEFINED FUNCTIONS -------------
#================================================

def unconn_errors_check(net1, net2, unconnected_errors)
  if !net1 || !net2
    logger.error("Connectivity check encountered 2 nets that doesn't exist. Potential issue in klayout...")
  elsif net1.circuit != net2.circuit || net1.cluster_id != net2.cluster_id
    # unconnected
    unconnected_errors.data.insert(ep)
  end
  unconnected_errors
end

def get_nets(_data, layer1, layer2, edge_pairs)
  net1 = l2n_data.probe_net(layer1.data, edge_pairs.first.p1)
  net2 = l2n_data.probe_net(layer2.data, edge_pairs.second.p1)
  [net1, net2]
end

def conn_space_viol(layer, conn_val, mode)
  connected_output = layer.space(conn_val.um, mode).polygons(0.001.um)
  singularity_errors = layer.space(0.001.um, mode).polygons(0.001.um)
  [connected_output, singularity_errors]
end

def conn_space_check(layer, not_conn_val, mode)
  unconnected_errors_unfiltered = layer.space(not_conn_val.um, mode)
  connected_output, singularity_errors = conn_space_viol(layer, conn_val, mode)
  # Filter out the errors arising from the same net
  unconnected_errors = DRC::DRCLayer.new(self, RBA::EdgePairs.new)
  unconnected_errors_unfiltered.data.each do |ep|
    net1, net2 = get_nets(l2n_data, layer, layer, ep)
    unconnected_errors = unconn_errors_check(net1, net2, unconnected_errors)
  end
  unconnected_output = unconnected_errors.polygons.join(singularity_errors)
  [connected_output, unconnected_output]
end

def conn_space_nets(layer, conn_val, not_conn_val, mode)
  nets = layer.nets
  connected_output = nets.space(conn_val.um, mode, props_eq).polygons(0.001.um)
  singularity_errors = nets.space(0.001.um, mode).polygons(0.001.um)
  unconnected_output = nets.space(not_conn_val.um, mode, props_ne).polygons(0.001.um).join(singularity_errors)
  [connected_output, unconnected_output]
end

def conn_space(layer, conn_val, not_conn_val, mode)
  if layer.respond_to?(:nets) # KLayout version (>=0.28.4) which supports "nets"
    connected_output, unconnected_output = conn_space_nets(layer, conn_val, not_conn_val, mode)
  else
    raise 'ERROR : Wrong connectivity implementation' if conn_val > not_conn_val

    connected_output, unconnected_output = conn_space_check(layer, not_conn_val, mode)
  end
  [connected_output, unconnected_output]
end

def sep_viol_nets(layer1, layer2, conn_val, not_conn_val, mode)
  connected_output   = layer1.nets.separation(layer2.nets, conn_val.um,     mode, props_eq).polygons(0.001.um)
  unconnected_output = layer1.nets.separation(layer2.nets, not_conn_val.um, mode, props_ne).polygons(0.001.um)
  [connected_output, unconnected_output]
end

def unconn_separation_check(layer1, layer2, not_conn_val, mode)
  unconnected_errors_unfiltered = layer1.separation(layer2, not_conn_val.um, mode)
  # Filter out the errors arising from the same net
  unconnected_errors = DRC::DRCLayer.new(self, RBA::EdgePairs.new)
  unconnected_errors_unfiltered.data.each do |ep|
    net1, net2 = get_nets(l2n_data, layer1, layer2, ep)
    unconnected_errors = unconn_errors(net1, net2, unconnected_errors)
  end
  unconnected_errors
end

def conn_separation(layer1, layer2, conn_val, not_conn_val, mode)
  if layer1.respond_to?(:nets) # KLayout version (>=0.28.4) which supports "nets"
    connected_output, unconnected_output = sep_viol_nets(layer1, layer2, conn_val, not_conn_val, mode)
  else
    raise 'ERROR : Wrong connectivity implementation' if conn_val > not_conn_val

    connected_output = layer1.separation(layer2, conn_val.um, mode).polygons(0.001.um)
    unconnected_errors = unconn_separation_check(layer1, layer2, not_conn_val, mode)
    unconnected_output = unconnected_errors.polygons(0.001.um)
  end
  [connected_output, unconnected_output]
end

def size_overunder_in_layers(large_layer, size_layer, size_value)
  out_layer = DRC::DRCLayer.new(self, RBA::Region.new)
  large_layer.data.each do |ep|
    curr_large_layer = DRC::DRCLayer.new(self, RBA::Region.new(ep))
    curr_large_layer = curr_large_layer.and(size_layer)
    curr_large_layer = curr_large_layer.sized(size_value, 'square_limit').merged.sized(-size_value, 'square_limit')
    out_layer.data.insert(curr_large_layer.data)
  end
  out_layer
end

# === IMPLICIT EXTRACTION ===
if CONNECTIVITY_RULES
  logger.info('Connectivity rules enabled, Netlist object will be generated.')
  netlist
end

# === LAYOUT EXTENT ===
CHIP = extent.sized(0.0)
logger.info("Total area of the design is #{CHIP.area} um^2.")

#================================================
#----------------- MAIN RUNSET ------------------
#================================================

logger.info('Starting GF180MCU DRC rules.')
logger.info('Running all FEOL rules') if FEOL

logger.info('Running all BEOL rules') if BEOL
# frozen_string_literal: true

################################################################################################
# Copyright 2023 GlobalFoundries PDK Authors
#
# Licensed under the Apache License, Version 2.0 (the 'License');
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an 'AS IS' BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################################

#================================================
#-----------------GEOMETRY RULES-----------------
#================================================

if OFFGRID
  logger.info('OFFGRID-ANGLES section')

  logger.info('Executing rule comp_OFFGRID')
  comp.ongrid(0.005).output('comp_OFFGRID', 'OFFGRID : OFFGRID vertex on comp')
  comp.edges.without_angle(0).without_angle(45).without_angle(90)
      .without_angle(-45).output('comp_angle',
                                 'ACUTE :  non 45 degree angle comp')

  logger.info('Executing rule dnwell_OFFGRID')
  dnwell.ongrid(0.005).output('dnwell_OFFGRID', 'OFFGRID : OFFGRID vertex on dnwell')
  dnwell.edges.without_angle(0).without_angle(45).without_angle(90)
        .without_angle(-45).output('dnwell_angle',
                                   'ACUTE :  non 45 degree angle dnwell')

  logger.info('Executing rule nwell_OFFGRID')
  nwell.ongrid(0.005).output('nwell_OFFGRID', 'OFFGRID : OFFGRID vertex on nwell')
  nwell.edges.without_angle(0).without_angle(45).without_angle(90)
       .without_angle(-45).output('nwell_angle',
                                  'ACUTE :  non 45 degree angle nwell')

  logger.info('Executing rule lvpwell_OFFGRID')
  lvpwell.ongrid(0.005).output('lvpwell_OFFGRID', 'OFFGRID : OFFGRID vertex on lvpwell')
  lvpwell.edges.without_angle(0).without_angle(45).without_angle(90)
         .without_angle(-45).output('lvpwell_angle',
                                    'ACUTE :  non 45 degree angle lvpwell')

  logger.info('Executing rule dualgate_OFFGRID')
  dualgate.ongrid(0.005).output('dualgate_OFFGRID', 'OFFGRID : OFFGRID vertex on dualgate')
  dualgate.edges.without_angle(0).without_angle(45).without_angle(90)
          .without_angle(-45).output('dualgate_angle',
                                     'ACUTE :  non 45 degree angle dualgate')

  logger.info('Executing rule poly2_OFFGRID')
  poly2.ongrid(0.005).output('poly2_OFFGRID', 'OFFGRID : OFFGRID vertex on poly2')
  poly2.edges.without_angle(0).without_angle(45).without_angle(90)
       .without_angle(-45).output('poly2_angle',
                                  'ACUTE :  non 45 degree angle poly2')

  logger.info('Executing rule nplus_OFFGRID')
  nplus.ongrid(0.005).output('nplus_OFFGRID', 'OFFGRID : OFFGRID vertex on nplus')
  nplus.edges.without_angle(0).without_angle(45).without_angle(90)
       .without_angle(-45).output('nplus_angle',
                                  'ACUTE :  non 45 degree angle nplus')

  logger.info('Executing rule pplus_OFFGRID')
  pplus.ongrid(0.005).output('pplus_OFFGRID', 'OFFGRID : OFFGRID vertex on pplus')
  pplus.edges.without_angle(0).without_angle(45).without_angle(90)
       .without_angle(-45).output('pplus_angle',
                                  'ACUTE :  non 45 degree angle pplus')

  logger.info('Executing rule sab_OFFGRID')
  sab.ongrid(0.005).output('sab_OFFGRID', 'OFFGRID : OFFGRID vertex on sab')
  sab.edges.without_angle(0).without_angle(45).without_angle(90)
     .without_angle(-45).output('sab_angle',
                                'ACUTE : non 45 degree angle sab')

  logger.info('Executing rule esd_OFFGRID')
  esd.ongrid(0.005).output('esd_OFFGRID', 'OFFGRID : OFFGRID vertex on esd')
  esd.edges.without_angle(0).without_angle(45).without_angle(90)
     .without_angle(-45).output('esd_angle',
                                'ACUTE : non 45 degree angle esd')

  logger.info('Executing rule resistor_OFFGRID')
  resistor.ongrid(0.005).output('resistor_OFFGRID', 'OFFGRID : OFFGRID vertex on resistor')
  resistor.edges.without_angle(0).without_angle(45).without_angle(90)
          .without_angle(-45).output('resistor_angle',
                                     'ACUTE :  non 45 degree angle resistor')

  logger.info('Executing rule fhres_OFFGRID')
  fhres.ongrid(0.005).output('fhres_OFFGRID', 'OFFGRID : OFFGRID vertex on fhres')
  fhres.edges.without_angle(0).without_angle(45).without_angle(90)
       .without_angle(-45).output('fhres_angle',
                                  'ACUTE :  non 45 degree angle fhres')

  logger.info('Executing rule fusetop_OFFGRID')
  fusetop.ongrid(0.005).output('fusetop_OFFGRID', 'OFFGRID : OFFGRID vertex on fusetop')
  fusetop.edges.without_angle(0).without_angle(45).without_angle(90)
         .without_angle(-45).output('fusetop_angle',
                                    'ACUTE :  non 45 degree angle fusetop')

  logger.info('Executing rule fusewindow_d_OFFGRID')
  fusewindow_d.ongrid(0.005).output('fusewindow_d_OFFGRID', 'OFFGRID : OFFGRID vertex on fusewindow_d')
  fusewindow_d.edges.without_angle(0).without_angle(45).without_angle(90)
              .without_angle(-45).output('fusewindow_d_angle', 'ACUTE : non 45 degree angle fusewindow_d')

  logger.info('Executing rule polyfuse_OFFGRID')
  polyfuse.ongrid(0.005).output('polyfuse_OFFGRID', 'OFFGRID : OFFGRID vertex on polyfuse')
  polyfuse.edges.without_angle(0).without_angle(45).without_angle(90)
          .without_angle(-45).output('polyfuse_angle',
                                     'ACUTE :  non 45 degree angle polyfuse')

  logger.info('Executing rule mvsd_OFFGRID')
  mvsd.ongrid(0.005).output('mvsd_OFFGRID', 'OFFGRID : OFFGRID vertex on mvsd')
  mvsd.edges.without_angle(0).without_angle(45).without_angle(90)
      .without_angle(-45).output('mvsd_angle',
                                 'ACUTE :  non 45 degree angle mvsd')

  logger.info('Executing rule mvpsd_OFFGRID')
  mvpsd.ongrid(0.005).output('mvpsd_OFFGRID', 'OFFGRID : OFFGRID vertex on mvpsd')
  mvpsd.edges.without_angle(0).without_angle(45).without_angle(90)
       .without_angle(-45).output('mvpsd_angle',
                                  'ACUTE :  non 45 degree angle mvpsd')

  logger.info('Executing rule nat_OFFGRID')
  nat.ongrid(0.005).output('nat_OFFGRID', 'OFFGRID : OFFGRID vertex on nat')
  nat.edges.without_angle(0).without_angle(45).without_angle(90)
     .without_angle(-45).output('nat_angle',
                                'ACUTE : non 45 degree angle nat')

  logger.info('Executing rule comp_dummy_OFFGRID')
  comp_dummy.ongrid(0.005).output('comp_dummy_OFFGRID', 'OFFGRID : OFFGRID vertex on comp_dummy')
  comp_dummy.edges.without_angle(0).without_angle(45).without_angle(90)
            .without_angle(-45).output('comp_dummy_angle',
                                       'ACUTE : non 45 degree angle comp_dummy')

  logger.info('Executing rule poly2_dummy_OFFGRID')
  poly2_dummy.ongrid(0.005).output('poly2_dummy_OFFGRID', 'OFFGRID : OFFGRID vertex on poly2_dummy')
  poly2_dummy.edges.without_angle(0).without_angle(45).without_angle(90)
             .without_angle(-45).output('poly2_dummy_angle',
                                        'ACUTE : non 45 degree angle poly2_dummy')

  logger.info('Executing rule schottky_diode_OFFGRID')
  schottky_diode.ongrid(0.005).output('schottky_diode_OFFGRID', 'OFFGRID : OFFGRID vertex on schottky_diode')
  schottky_diode.edges.without_angle(0).without_angle(45).without_angle(90)
                .without_angle(-45).output('schottky_diode_angle', 'ACUTE : non 45 degree angle schottky_diode')

  logger.info('Executing rule zener_OFFGRID')
  zener.ongrid(0.005).output('zener_OFFGRID', 'OFFGRID : OFFGRID vertex on zener')
  zener.edges.without_angle(0).without_angle(45).without_angle(90)
       .without_angle(-45).output('zener_angle',
                                  'ACUTE :  non 45 degree angle zener')

  logger.info('Executing rule res_mk_OFFGRID')
  res_mk.ongrid(0.005).output('res_mk_OFFGRID', 'OFFGRID : OFFGRID vertex on res_mk')
  res_mk.edges.without_angle(0).without_angle(45).without_angle(90)
        .without_angle(-45).output('res_mk_angle',
                                   'ACUTE :  non 45 degree angle res_mk')

  logger.info('Executing rule opc_drc_OFFGRID')
  opc_drc.ongrid(0.005).output('opc_drc_OFFGRID', 'OFFGRID : OFFGRID vertex on opc_drc')
  opc_drc.edges.without_angle(0).without_angle(45).without_angle(90)
         .without_angle(-45).output('opc_drc_angle',
                                    'ACUTE :  non 45 degree angle opc_drc')

  logger.info('Executing rule ndmy_OFFGRID')
  ndmy.ongrid(0.005).output('ndmy_OFFGRID', 'OFFGRID : OFFGRID vertex on ndmy')
  ndmy.edges.without_angle(0).without_angle(45).without_angle(90)
      .without_angle(-45).output('ndmy_angle',
                                 'ACUTE :  non 45 degree angle ndmy')

  logger.info('Executing rule pmndmy_OFFGRID')
  pmndmy.ongrid(0.005).output('pmndmy_OFFGRID', 'OFFGRID : OFFGRID vertex on pmndmy')
  pmndmy.edges.without_angle(0).without_angle(45).without_angle(90)
        .without_angle(-45).output('pmndmy_angle',
                                   'ACUTE :  non 45 degree angle pmndmy')

  logger.info('Executing rule v5_xtor_OFFGRID')
  v5_xtor.ongrid(0.005).output('v5_xtor_OFFGRID', 'OFFGRID : OFFGRID vertex on v5_xtor')
  v5_xtor.edges.without_angle(0).without_angle(45).without_angle(90)
         .without_angle(-45).output('v5_xtor_angle',
                                    'ACUTE :  non 45 degree angle v5_xtor')

  logger.info('Executing rule cap_mk_OFFGRID')
  cap_mk.ongrid(0.005).output('cap_mk_OFFGRID', 'OFFGRID : OFFGRID vertex on cap_mk')
  cap_mk.edges.without_angle(0).without_angle(45).without_angle(90)
        .without_angle(-45).output('cap_mk_angle',
                                   'ACUTE :  non 45 degree angle cap_mk')

  logger.info('Executing rule mos_cap_mk_OFFGRID')
  mos_cap_mk.ongrid(0.005).output('mos_cap_mk_OFFGRID', 'OFFGRID : OFFGRID vertex on mos_cap_mk')
  mos_cap_mk.edges.without_angle(0).without_angle(45).without_angle(90)
            .without_angle(-45).output('mos_cap_mk_angle',
                                       'ACUTE : non 45 degree angle mos_cap_mk')

  logger.info('Executing rule ind_mk_OFFGRID')
  ind_mk.ongrid(0.005).output('ind_mk_OFFGRID', 'OFFGRID : OFFGRID vertex on ind_mk')
  ind_mk.edges.without_angle(0).without_angle(45).without_angle(90)
        .without_angle(-45).output('ind_mk_angle',
                                   'ACUTE :  non 45 degree angle ind_mk')

  logger.info('Executing rule diode_mk_OFFGRID')
  diode_mk.ongrid(0.005).output('diode_mk_OFFGRID', 'OFFGRID : OFFGRID vertex on diode_mk')
  diode_mk.edges.without_angle(0).without_angle(45).without_angle(90)
          .without_angle(-45).output('diode_mk_angle',
                                     'ACUTE :  non 45 degree angle diode_mk')

  logger.info('Executing rule drc_bjt_OFFGRID')
  drc_bjt.ongrid(0.005).output('drc_bjt_OFFGRID', 'OFFGRID : OFFGRID vertex on drc_bjt')
  drc_bjt.edges.without_angle(0).without_angle(45).without_angle(90)
         .without_angle(-45).output('drc_bjt_angle',
                                    'ACUTE :  non 45 degree angle drc_bjt')

  logger.info('Executing rule lvs_bjt_OFFGRID')
  lvs_bjt.ongrid(0.005).output('lvs_bjt_OFFGRID', 'OFFGRID : OFFGRID vertex on lvs_bjt')
  lvs_bjt.edges.without_angle(0).without_angle(45).without_angle(90)
         .without_angle(-45).output('lvs_bjt_angle',
                                    'ACUTE :  non 45 degree angle lvs_bjt')

  logger.info('Executing rule mim_l_mk_OFFGRID')
  mim_l_mk.ongrid(0.005).output('mim_l_mk_OFFGRID', 'OFFGRID : OFFGRID vertex on mim_l_mk')
  mim_l_mk.edges.without_angle(0).without_angle(45).without_angle(90)
          .without_angle(-45).output('mim_l_mk_angle',
                                     'ACUTE :  non 45 degree angle mim_l_mk')

  logger.info('Executing rule latchup_mk_OFFGRID')
  latchup_mk.ongrid(0.005).output('latchup_mk_OFFGRID', 'OFFGRID : OFFGRID vertex on latchup_mk')
  latchup_mk.edges.without_angle(0).without_angle(45).without_angle(90)
            .without_angle(-45).output('latchup_mk_angle',
                                       'ACUTE : non 45 degree angle latchup_mk')

  logger.info('Executing rule guard_ring_mk_OFFGRID')
  guard_ring_mk.ongrid(0.005).output('guard_ring_mk_OFFGRID', 'OFFGRID : OFFGRID vertex on guard_ring_mk')
  guard_ring_mk.edges.without_angle(0).without_angle(45).without_angle(90)
               .without_angle(-45).output('guard_ring_mk_angle', 'ACUTE : non 45 degree angle guard_ring_mk')

  logger.info('Executing rule otp_mk_OFFGRID')
  otp_mk.ongrid(0.005).output('otp_mk_OFFGRID', 'OFFGRID : OFFGRID vertex on otp_mk')
  otp_mk.edges.without_angle(0).without_angle(45).without_angle(90)
        .without_angle(-45).output('otp_mk_angle',
                                   'ACUTE :  non 45 degree angle otp_mk')

  logger.info('Executing rule mtpmark_OFFGRID')
  mtpmark.ongrid(0.005).output('mtpmark_OFFGRID', 'OFFGRID : OFFGRID vertex on mtpmark')
  mtpmark.edges.without_angle(0).without_angle(45).without_angle(90)
         .without_angle(-45).output('mtpmark_angle',
                                    'ACUTE :  non 45 degree angle mtpmark')

  logger.info('Executing rule neo_ee_mk_OFFGRID')
  neo_ee_mk.ongrid(0.005).output('neo_ee_mk_OFFGRID', 'OFFGRID : OFFGRID vertex on neo_ee_mk')
  neo_ee_mk.edges.without_angle(0).without_angle(45).without_angle(90)
           .without_angle(-45).output('neo_ee_mk_angle',
                                      'ACUTE :  non 45 degree angle neo_ee_mk')

  logger.info('Executing rule sramcore_OFFGRID')
  sramcore.ongrid(0.005).output('sramcore_OFFGRID', 'OFFGRID : OFFGRID vertex on sramcore')
  sramcore.edges.without_angle(0).without_angle(45).without_angle(90)
          .without_angle(-45).output('sramcore_angle',
                                     'ACUTE :  non 45 degree angle sramcore')

  logger.info('Executing rule lvs_rf_OFFGRID')
  lvs_rf.ongrid(0.005).output('lvs_rf_OFFGRID', 'OFFGRID : OFFGRID vertex on lvs_rf')
  lvs_rf.edges.without_angle(0).without_angle(45).without_angle(90)
        .without_angle(-45).output('lvs_rf_angle',
                                   'ACUTE :  non 45 degree angle lvs_rf')

  logger.info('Executing rule lvs_drain_OFFGRID')
  lvs_drain.ongrid(0.005).output('lvs_drain_OFFGRID', 'OFFGRID : OFFGRID vertex on lvs_drain')
  lvs_drain.edges.without_angle(0).without_angle(45).without_angle(90)
           .without_angle(-45).output('lvs_drain_angle',
                                      'ACUTE :  non 45 degree angle lvs_drain')

  logger.info('Executing rule ind_mk_OFFGRID')
  ind_mk.ongrid(0.005).output('ind_mk_OFFGRID', 'OFFGRID : OFFGRID vertex on ind_mk')
  ind_mk.edges.without_angle(0).without_angle(45).without_angle(90)
        .without_angle(-45).output('ind_mk_angle',
                                   'ACUTE :  non 45 degree angle ind_mk')

  logger.info('Executing rule hvpolyrs_OFFGRID')
  hvpolyrs.ongrid(0.005).output('hvpolyrs_OFFGRID', 'OFFGRID : OFFGRID vertex on hvpolyrs')
  hvpolyrs.edges.without_angle(0).without_angle(45).without_angle(90)
          .without_angle(-45).output('hvpolyrs_angle',
                                     'ACUTE :  non 45 degree angle hvpolyrs')

  logger.info('Executing rule lvs_io_OFFGRID')
  lvs_io.ongrid(0.005).output('lvs_io_OFFGRID', 'OFFGRID : OFFGRID vertex on lvs_io')
  lvs_io.edges.without_angle(0).without_angle(45).without_angle(90)
        .without_angle(-45).output('lvs_io_angle',
                                   'ACUTE :  non 45 degree angle lvs_io')

  logger.info('Executing rule probe_mk_OFFGRID')
  probe_mk.ongrid(0.005).output('probe_mk_OFFGRID', 'OFFGRID : OFFGRID vertex on probe_mk')
  probe_mk.edges.without_angle(0).without_angle(45).without_angle(90)
          .without_angle(-45).output('probe_mk_angle',
                                     'ACUTE :  non 45 degree angle probe_mk')

  logger.info('Executing rule esd_mk_OFFGRID')
  esd_mk.ongrid(0.005).output('esd_mk_OFFGRID', 'OFFGRID : OFFGRID vertex on esd_mk')
  esd_mk.edges.without_angle(0).without_angle(45).without_angle(90)
        .without_angle(-45).output('esd_mk_angle',
                                   'ACUTE :  non 45 degree angle esd_mk')

  logger.info('Executing rule lvs_source_OFFGRID')
  lvs_source.ongrid(0.005).output('lvs_source_OFFGRID', 'OFFGRID : OFFGRID vertex on lvs_source')
  lvs_source.edges.without_angle(0).without_angle(45).without_angle(90)
            .without_angle(-45).output('lvs_source_angle',
                                       'ACUTE : non 45 degree angle lvs_source')

  logger.info('Executing rule well_diode_mk_OFFGRID')
  well_diode_mk.ongrid(0.005).output('well_diode_mk_OFFGRID', 'OFFGRID : OFFGRID vertex on well_diode_mk')
  well_diode_mk.edges.without_angle(0).without_angle(45).without_angle(90)
               .without_angle(-45).output('well_diode_mk_angle', 'ACUTE : non 45 degree angle well_diode_mk')

  logger.info('Executing rule ldmos_xtor_OFFGRID')
  ldmos_xtor.ongrid(0.005).output('ldmos_xtor_OFFGRID', 'OFFGRID : OFFGRID vertex on ldmos_xtor')
  ldmos_xtor.edges.without_angle(0).without_angle(45).without_angle(90)
            .without_angle(-45).output('ldmos_xtor_angle',
                                       'ACUTE : non 45 degree angle ldmos_xtor')

  logger.info('Executing rule plfuse_OFFGRID')
  plfuse.ongrid(0.005).output('plfuse_OFFGRID', 'OFFGRID : OFFGRID vertex on plfuse')
  plfuse.edges.without_angle(0).without_angle(45).without_angle(90)
        .without_angle(-45).output('plfuse_angle',
                                   'ACUTE :  non 45 degree angle plfuse')

  logger.info('Executing rule efuse_mk_OFFGRID')
  efuse_mk.ongrid(0.005).output('efuse_mk_OFFGRID', 'OFFGRID : OFFGRID vertex on efuse_mk')
  efuse_mk.edges.without_angle(0).without_angle(45).without_angle(90)
          .without_angle(-45).output('efuse_mk_angle',
                                     'ACUTE :  non 45 degree angle efuse_mk')

  logger.info('Executing rule mcell_feol_mk_OFFGRID')
  mcell_feol_mk.ongrid(0.005).output('mcell_feol_mk_OFFGRID', 'OFFGRID : OFFGRID vertex on mcell_feol_mk')
  mcell_feol_mk.edges.without_angle(0).without_angle(45).without_angle(90)
               .without_angle(-45).output('mcell_feol_mk_angle', 'ACUTE : non 45 degree angle mcell_feol_mk')

  logger.info('Executing rule ymtp_mk_OFFGRID')
  ymtp_mk.ongrid(0.005).output('ymtp_mk_OFFGRID', 'OFFGRID : OFFGRID vertex on ymtp_mk')
  ymtp_mk.edges.without_angle(0).without_angle(45).without_angle(90)
         .without_angle(-45).output('ymtp_mk_angle',
                                    'ACUTE :  non 45 degree angle ymtp_mk')

  logger.info('Executing rule dev_wf_mk_OFFGRID')
  dev_wf_mk.ongrid(0.005).output('dev_wf_mk_OFFGRID', 'OFFGRID : OFFGRID vertex on dev_wf_mk')
  dev_wf_mk.edges.without_angle(0).without_angle(45).without_angle(90)
           .without_angle(-45).output('dev_wf_mk_angle',
                                      'ACUTE :  non 45 degree angle dev_wf_mk')

  logger.info('Executing rule mdiode_OFFGRID')
  mdiode.ongrid(0.005).output('mdiode_OFFGRID', 'OFFGRID : OFFGRID vertex on mdiode')
  mdiode.edges.without_angle(0).without_angle(45).without_angle(90)
        .without_angle(-45).output('mdiode_angle',
                                   'ACUTE :  non 45 degree angle mdiode')

  logger.info('Executing rule contact_OFFGRID')
  contact.ongrid(0.005).output('contact_OFFGRID', 'OFFGRID : OFFGRID vertex on contact')
  contact.edges.without_angle(0).without_angle(45).without_angle(90)
         .without_angle(-45).output('contact_angle',
                                    'ACUTE :  non 45 degree angle contact')

  logger.info('Executing rule metal1_OFFGRID')
  metal1.ongrid(0.005).output('metal1_OFFGRID', 'OFFGRID : OFFGRID vertex on metal1')
  metal1.edges.without_angle(0).without_angle(45).without_angle(90)
        .without_angle(-45).output('metal1_angle',
                                   'ACUTE :  non 45 degree angle metal1')

  logger.info('Executing rule metal1_slot_OFFGRID')
  metal1_slot.ongrid(0.005).output('metal1_slot_OFFGRID', 'OFFGRID : OFFGRID vertex on metal1_slot')
  metal1_slot.edges.without_angle(0).without_angle(45).without_angle(90)
             .without_angle(-45).output('metal1_slot_angle',
                                        'ACUTE : non 45 degree angle metal1_slot')

  logger.info('Executing rule metal1_blk_OFFGRID')
  metal1_blk.ongrid(0.005).output('metal1_blk_OFFGRID', 'OFFGRID : OFFGRID vertex on metal1_blk')
  metal1_blk.edges.without_angle(0).without_angle(45).without_angle(90)
            .without_angle(-45).output('metal1_blk_angle',
                                       'ACUTE : non 45 degree angle metal1_blk')

  logger.info('Executing rule via1_OFFGRID')
  via1.ongrid(0.005).output('via1_OFFGRID', 'OFFGRID : OFFGRID vertex on via1')
  via1.edges.without_angle(0).without_angle(45).without_angle(90)
      .without_angle(-45).output('via1_angle',
                                 'ACUTE :  non 45 degree angle via1')

  logger.info('Executing rule metal2_OFFGRID')
  metal2.ongrid(0.005).output('metal2_OFFGRID', 'OFFGRID : OFFGRID vertex on metal2')
  metal2.edges.without_angle(0).without_angle(45).without_angle(90)
        .without_angle(-45).output('metal2_angle',
                                   'ACUTE :  non 45 degree angle metal2')

  logger.info('Executing rule metal2_slot_OFFGRID')
  metal2_slot.ongrid(0.005).output('metal2_slot_OFFGRID', 'OFFGRID : OFFGRID vertex on metal2_slot')
  metal2_slot.edges.without_angle(0).without_angle(45).without_angle(90)
             .without_angle(-45).output('metal2_slot_angle',
                                        'ACUTE : non 45 degree angle metal2_slot')

  logger.info('Executing rule metal2_blk_OFFGRID')
  metal2_blk.ongrid(0.005).output('metal2_blk_OFFGRID', 'OFFGRID : OFFGRID vertex on metal2_blk')
  metal2_blk.edges.without_angle(0).without_angle(45).without_angle(90)
            .without_angle(-45).output('metal2_blk_angle',
                                       'ACUTE : non 45 degree angle metal2_blk')

  case METAL_LEVEL
  when '3LM', '4LM', '5LM', '6LM'
    logger.info('Executing rule via2_OFFGRID')
    via2.ongrid(0.005).output('via2_OFFGRID', 'OFFGRID : OFFGRID vertex on via2')
    via2.edges.without_angle(0).without_angle(45).without_angle(90)
        .without_angle(-45).output('via2_angle',
                                   'ACUTE :  non 45 degree angle via2')

    logger.info('Executing rule metal3_OFFGRID')
    metal3.ongrid(0.005).output('metal3_OFFGRID', 'OFFGRID : OFFGRID vertex on metal3')
    metal3.edges.without_angle(0).without_angle(45).without_angle(90)
          .without_angle(-45).output('metal3_angle',
                                     'ACUTE :  non 45 degree angle metal3')

    logger.info('Executing rule metal3_dummy_OFFGRID')
    metal3_dummy.ongrid(0.005).output('metal3_dummy_OFFGRID', 'OFFGRID : OFFGRID vertex on metal3_dummy')
    metal3_dummy.edges.without_angle(0).without_angle(45).without_angle(90)
                .without_angle(-45).output('metal3_dummy_angle', 'ACUTE : non 45 degree angle metal3_dummy')

    logger.info('Executing rule metal3_blk_OFFGRID')
    metal3_blk.ongrid(0.005).output('metal3_blk_OFFGRID', 'OFFGRID : OFFGRID vertex on metal3_blk')
    metal3_blk.edges.without_angle(0).without_angle(45).without_angle(90)
              .without_angle(-45).output('metal3_blk_angle',
                                         'ACUTE : non 45 degree angle metal3_blk')
  end

  case METAL_LEVEL
  when '4LM', '5LM', '6LM'
    logger.info('Executing rule via3_OFFGRID')
    via3.ongrid(0.005).output('via3_OFFGRID', 'OFFGRID : OFFGRID vertex on via3')
    via3.edges.without_angle(0).without_angle(45).without_angle(90)
        .without_angle(-45).output('via3_angle',
                                   'ACUTE :  non 45 degree angle via3')

    logger.info('Executing rule metal4_OFFGRID')
    metal4.ongrid(0.005).output('metal4_OFFGRID', 'OFFGRID : OFFGRID vertex on metal4')
    metal4.edges.without_angle(0).without_angle(45).without_angle(90)
          .without_angle(-45).output('metal4_angle',
                                     'ACUTE : non 45 degree angle metal4')

    logger.info('Executing rule metal4_dummy_OFFGRID')
    metal4_dummy.ongrid(0.005).output('metal4_dummy_OFFGRID', 'OFFGRID : OFFGRID vertex on metal4_dummy')
    metal4_dummy.edges.without_angle(0).without_angle(45).without_angle(90)
                .without_angle(-45).output('metal4_dummy_angle', 'ACUTE : non 45 degree angle metal4_dummy')

    logger.info('Executing rule metal4_blk_OFFGRID')
    metal4_blk.ongrid(0.005).output('metal4_blk_OFFGRID', 'OFFGRID : OFFGRID vertex on metal4_blk')
    metal4_blk.edges.without_angle(0).without_angle(45).without_angle(90)
              .without_angle(-45).output('metal4_blk_angle', 'ACUTE : non 45 degree angle metal4_blk')
  end
  case METAL_LEVEL
  when '5LM', '6LM'
    logger.info('Executing rule via4_OFFGRID')
    via4.ongrid(0.005).output('via4_OFFGRID', 'OFFGRID : OFFGRID vertex on via4')
    via4.edges.without_angle(0).without_angle(45).without_angle(90)
        .without_angle(-45).output('via4_angle',
                                   'ACUTE : non 45 degree angle via4')

    logger.info('Executing rule metal5_OFFGRID')
    metal5.ongrid(0.005).output('metal5_OFFGRID', 'OFFGRID : OFFGRID vertex on metal5')
    metal5.edges.without_angle(0).without_angle(45).without_angle(90)
          .without_angle(-45).output('metal5_angle',
                                     'ACUTE : non 45 degree angle metal5')

    logger.info('Executing rule metal5_dummy_OFFGRID')
    metal5_dummy.ongrid(0.005).output('metal5_dummy_OFFGRID', 'OFFGRID : OFFGRID vertex on metal5_dummy')
    metal5_dummy.edges.without_angle(0).without_angle(45).without_angle(90)
                .without_angle(-45).output('metal5_dummy_angle', 'ACUTE : non 45 degree angle metal5_dummy')

    logger.info('Executing rule metal5_blk_OFFGRID')
    metal5_blk.ongrid(0.005).output('metal5_blk_OFFGRID', 'OFFGRID : OFFGRID vertex on metal5_blk')
    metal5_blk.edges.without_angle(0).without_angle(45).without_angle(90)
              .without_angle(-45).output('metal5_blk_angle', 'ACUTE : non 45 degree angle metal5_blk')
  end
  case METAL_LEVEL
  when '6LM'
    logger.info('Executing rule via5_OFFGRID')
    via5.ongrid(0.005).output('via5_OFFGRID', 'OFFGRID : OFFGRID vertex on via5')
    via5.edges.without_angle(0).without_angle(45).without_angle(90)
        .without_angle(-45).output('via5_angle',
                                   'ACUTE : non 45 degree angle via5')

    logger.info('Executing rule metaltop_OFFGRID')
    metaltop.ongrid(0.005).output('metaltop_OFFGRID', 'OFFGRID : OFFGRID vertex on metaltop')
    metaltop.edges.without_angle(0).without_angle(45).without_angle(90)
            .without_angle(-45).output('metaltop_angle', 'ACUTE : non 45 degree angle metaltop')

    logger.info('Executing rule metaltop_dummy_OFFGRID')
    metaltop_dummy.ongrid(0.005).output('metaltop_dummy_OFFGRID',
                                        'OFFGRID : OFFGRID vertex on metaltop_dummy')
    metaltop_dummy.edges.without_angle(0).without_angle(45).without_angle(90)
                  .without_angle(-45).output('metaltop_dummy_angle', 'ACUTE : non 45 degree angle metaltop_dummy')

    logger.info('Executing rule metaltop_blk_OFFGRID')
    metaltop_blk.ongrid(0.005).output('metaltop_blk_OFFGRID',
                                      'OFFGRID : OFFGRID vertex on metaltop_blk')
    metaltop_blk.edges.without_angle(0).without_angle(45).without_angle(90)
                .without_angle(-45).output('metaltop_blk_angle', 'ACUTE : non 45 degree angle metaltop_blk_angle')
  end

  logger.info('Executing rule pad_OFFGRID')
  pad.ongrid(0.005).output('pad_OFFGRID', 'OFFGRID : OFFGRID vertex on pad')
  pad.edges.without_angle(0).without_angle(45).without_angle(90)
     .without_angle(-45).output('pad_angle',
                                'ACUTE : non 45 degree angle pad')

  logger.info('Executing rule ubmpperi_OFFGRID')
  ubmpperi.ongrid(0.005).output('ubmpperi_OFFGRID', 'OFFGRID : OFFGRID vertex on ubmpperi')
  ubmpperi.edges.without_angle(0).without_angle(45).without_angle(90)
          .without_angle(-45).output('ubmpperi_angle',
                                     'ACUTE :  non 45 degree angle ubmpperi')

  logger.info('Executing rule ubmparray_OFFGRID')
  ubmparray.ongrid(0.005).output('ubmparray_OFFGRID', 'OFFGRID : OFFGRID vertex on ubmparray')
  ubmparray.edges.without_angle(0).without_angle(45).without_angle(90)
           .without_angle(-45).output('ubmparray_angle',
                                      'ACUTE :  non 45 degree angle ubmparray')

  logger.info('Executing rule ubmeplate_OFFGRID')
  ubmeplate.ongrid(0.005).output('ubmeplate_OFFGRID', 'OFFGRID : OFFGRID vertex on ubmeplate')
  ubmeplate.edges.without_angle(0).without_angle(45).without_angle(90)
           .without_angle(-45).output('ubmeplate_angle',
                                      'ACUTE :  non 45 degree angle ubmeplate')

  logger.info('Executing rule metal1_res_OFFGRID')
  metal1_res.ongrid(0.005).output('metal1_res_OFFGRID', 'OFFGRID : OFFGRID vertex on metal1_res')
  metal1_res.edges.without_angle(0).without_angle(45).without_angle(90)
            .without_angle(-45).output('metal1_res_angle',
                                       'ACUTE : non 45 degree angle metal1_res')

  logger.info('Executing rule metal2_res_OFFGRID')
  metal2_res.ongrid(0.005).output('metal2_res_OFFGRID', 'OFFGRID : OFFGRID vertex on metal2_res')
  metal2_res.edges.without_angle(0).without_angle(45).without_angle(90)
            .without_angle(-45).output('metal2_res_angle',
                                       'ACUTE : non 45 degree angle metal2_res')

  logger.info('Executing rule metal3_res_OFFGRID')
  metal3_res.ongrid(0.005).output('metal3_res_OFFGRID', 'OFFGRID : OFFGRID vertex on metal3_res')
  metal3_res.edges.without_angle(0).without_angle(45).without_angle(90)
            .without_angle(-45).output('metal3_res_angle',
                                       'ACUTE : non 45 degree angle metal3_res')

  logger.info('Executing rule metal4_res_OFFGRID')
  metal4_res.ongrid(0.005).output('metal4_res_OFFGRID', 'OFFGRID : OFFGRID vertex on metal4_res')
  metal4_res.edges.without_angle(0).without_angle(45).without_angle(90)
            .without_angle(-45).output('metal4_res_angle',
                                       'ACUTE : non 45 degree angle metal4_res')

  logger.info('Executing rule metal5_res_OFFGRID')
  metal5_res.ongrid(0.005).output('metal5_res_OFFGRID', 'OFFGRID : OFFGRID vertex on metal5_res')
  metal5_res.edges.without_angle(0).without_angle(45).without_angle(90)
            .without_angle(-45).output('metal5_res_angle',
                                       'ACUTE : non 45 degree angle metal5_res')

  logger.info('Executing rule metal6_res_OFFGRID')
  metal6_res.ongrid(0.005).output('metal6_res_OFFGRID', 'OFFGRID : OFFGRID vertex on metal6_res')
  metal6_res.edges.without_angle(0).without_angle(45).without_angle(90)
            .without_angle(-45).output('metal6_res_angle',
                                       'ACUTE : non 45 degree angle metal6_res')

  logger.info('Executing rule pr_bndry_OFFGRID')
  pr_bndry.ongrid(0.005).output('pr_bndry_OFFGRID', 'OFFGRID : OFFGRID vertex on pr_bndry')
  pr_bndry.edges.without_angle(0).without_angle(45).without_angle(90)
          .without_angle(-45).output('pr_bndry_angle',
                                     'ACUTE : non 45 degree angle pr_bndry')

  logger.info('Executing rule border_OFFGRID')
  border.ongrid(0.005).output('border_OFFGRID', 'OFFGRID : OFFGRID vertex on border')
  border.edges.without_angle(0).without_angle(45).without_angle(90)
        .without_angle(-45).output('border_angle',
                                   'ACUTE : non 45 degree angle border')

end
# frozen_string_literal: true

################################################################################################
# Copyright 2022 GlobalFoundries PDK Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################################

exec_end_time = Time.now
run_time = exec_end_time - exec_start_time
logger.info("#{$table_name} DRC Total Run time #{run_time} seconds")
